{"mappings":"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","sources":["ts/core/color.ts","ts/core/vector3D.ts","ts/core/drawer.ts","ts/core/matrix.ts","ts/core/triangle.ts","ts/core/obj.parser.ts","ts/main.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-d71428437548a2d8.js"],"sourcesContent":["export class Color {\r\n\r\n    public r: number;\r\n    public g: number;\r\n    public b: number;\r\n    public a: number;\r\n\r\n    constructor(r: number, g: number, b: number, a: number = 255) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n\r\n    public static getRanomColor(): Color {\r\n        return new Color(this._getRandomInt(255), this._getRandomInt(255), this._getRandomInt(255))\r\n    }\r\n\r\n    private static  _getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * Math.floor(max+1));\r\n    }\r\n\r\n}\r\n\r\n\r\n","export class Vector3D {\r\n\r\n    x: number\r\n    y: number\r\n    z: number\r\n\r\n    constructor(x: number, y: number, z:number) {\r\n        this.x = x\r\n        this.y = y\r\n        this.z = z\r\n    }\r\n  \r\n\r\n    // right hand coordinate system\r\n    public crossProduct(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\r\n    }\r\n\r\n    public dotProduct(v: Vector3D): number { \r\n        return this.x * v.x + this.y * v.y + this.z * v.z\r\n    }\r\n\r\n    public subtract(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x - v.x, this.y - v.y, this.z - v.z)\r\n    }\r\n\r\n    public add(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x + v.x, this.y + v.y, this.z + v.z)\r\n    }\r\n\r\n    public round(): Vector3D {\r\n        return new Vector3D(Math.round(this.x), Math.round(this.y), Math.round(this.z))\r\n    }\r\n\r\n    public multiply(scalar: number): Vector3D {\r\n        return new Vector3D(this.x * scalar, this.y * scalar, this.z * scalar)\r\n    }\r\n\r\n    public normalize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n            this.z /= length\r\n        }\r\n    }\r\n}\r\n","import { Color } from \"./color\";\r\nimport { Vector3D } from \"./vector3D\";\r\n\r\nlet  stopAnimation: boolean = false\r\nlet frameCount: number = 0\r\nlet fps: number = 10, fpsInterval: number, startTime: number, now: number, then: number, elapsed: number\r\n\r\n\r\nexport class Drawer {\r\n    \r\n        private canvas: HTMLCanvasElement;\r\n        public width: number\r\n        public height: number\r\n        public canvasWidth: number\r\n        public canvasHeight: number\r\n        public pixelSize: number\r\n        public pixels: Color[][]\r\n        private context: CanvasRenderingContext2D\r\n        private imageData: ImageData\r\n        public currentColor: Color\r\n        public buf: ArrayBuffer\r\n        public buf8: Uint8ClampedArray\r\n        public data: Uint32Array\r\n        public int24Color: number\r\n        public update: () => void\r\n        public zBuffer: number[]\r\n    \r\n        constructor(canvas: HTMLCanvasElement, width: number, height: number, pixelSize: number) {\r\n            this.canvas = canvas\r\n            this.width = width * pixelSize\r\n            this.height = height * pixelSize\r\n            this.canvasWidth = width\r\n            this.canvasHeight = height\r\n            this.pixelSize = pixelSize\r\n            this.context = this.canvas.getContext(\"2d\")\r\n            this.imageData = this.context.createImageData(this.width, this.height)\r\n            this.currentColor = new Color(0, 0, 0)\r\n            this.context.canvas.width = this.width\r\n            this.context.canvas.height = this.height\r\n            this.pixels = []\r\n            this.zBuffer = new Array(this.width * this.height).fill(-Infinity)\r\n\r\n            for (let i = 0; i < this.width; i++) {\r\n                let cols = []\r\n                for (let j = 0; j < this.height; j++) {\r\n                    cols.push(new Color(0, 0, 0))\r\n                }\r\n                this.pixels.push(cols)\r\n            }\r\n\r\n            this.buf = new ArrayBuffer(this.width * this.height * 4)\r\n            this.buf8 = new Uint8ClampedArray(this.buf)\r\n            this.data = new Uint32Array(this.buf)\r\n\r\n            fpsInterval = 1000 / fps\r\n            then = Date.now()\r\n            startTime = then\r\n            this.update = () => {}\r\n        \r\n        }\r\n\r\n        public clearZBuffer(): void{\r\n            this.zBuffer = new Array(this.width * this.height).fill(-Infinity)\r\n        }\r\n      \r\n        public setColor(color: Color): void{\r\n           this.currentColor = color\r\n           this.int24Color = (255 << 24) | (color.b << 16) | (color.g << 8) | color.r\r\n        }\r\n\r\n\r\n        public addPoint(x: number, y: number): void {\r\n            let canvasX = x;\r\n            let canvasY = this.canvasHeight - y - 1;\r\n            if (this.pixelSize == 1) {\r\n                let pixelIndex = canvasY * this.width + canvasX;\r\n                this.data[pixelIndex] = this.int24Color;\r\n                return;\r\n            }\r\n            \r\n            const canvasStartX = canvasX * this.pixelSize;\r\n            const canvasStartY = canvasY * this.pixelSize;\r\n            for (var dx = 0; dx < this.pixelSize; dx++) {\r\n                for (var dy = 0; dy < this.pixelSize; dy++) {\r\n                    let pixelIndex = (canvasStartY + dy) * this.width + canvasStartX + dx; \r\n                    this.data[pixelIndex] = this.int24Color;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        public addLine(x0: number, y0: number , x1: number, y1: number): void{\r\n            // y = kx + b\r\n            // setpY = k = (y1 - y0) / (x1 - x0)\r\n            // b = y0 - kx0\r\n            // Bresenham's line algorithm\r\n            \r\n            let isInvert = false\r\n        \r\n            if (Math.abs(y1 - y0) > Math.abs(x1 - x0)) {\r\n                [x0, y0] = [y0, x0];\r\n                [x1, y1] = [y1, x1];\r\n                isInvert = true\r\n            }\r\n        \r\n            if (x1 < x0) {\r\n                [x0, x1] = [x1, x0];\r\n                [y0, y1] = [y1, y0];\r\n            }\r\n        \r\n            let xLength = x1 - x0\r\n            let deltaY = 0\r\n            let stepY = 2 * Math.abs((y1 - y0))\r\n            let y = y0\r\n            let dy = y1 > y0 ? 1 : -1\r\n            let doubleXLenght = 2 * xLength\r\n        \r\n            for (let x = x0; x <= x1; x++) {\r\n                this.addPoint(isInvert ? y : x, isInvert ? x : y)\r\n                deltaY += stepY\r\n                if (deltaY > xLength) {\r\n                    y += dy\r\n                    deltaY -= doubleXLenght\r\n                }\r\n        \r\n            }\r\n        }\r\n\r\n\r\n        public addTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): void {\r\n            this.addLine(x0, y0, x1, y1)\r\n            this.addLine(x1, y1, x2, y2)\r\n            this.addLine(x2, y2, x0, y0)\r\n        }\r\n\r\n        public Barycentric(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n            let ab = b.subtract(a)\r\n            let ac = c.subtract(a)\r\n            let pa = a.subtract(p)\r\n        \r\n            let v1 = new Vector3D(ab.x, ac.x, pa.x)\r\n            let v2 = new Vector3D(ab.y, ac.y, pa.y)\r\n            let v3 = v1.crossProduct(v2)\r\n        \r\n            if (v3.z == 0) return null\r\n        \r\n            let u = v3.x / v3.z\r\n            let v = v3.y / v3.z\r\n        \r\n            return new Vector3D(1 - u - v, v, u)\r\n        }\r\n\r\n        public fillTriangleBarycentric(a: Vector3D, b:Vector3D, c: Vector3D): void {\r\n            let minX = Math.min(a.x, b.x, c.x)\r\n            let maxX = Math.max(a.x, b.x, c.x)\r\n\r\n            let minY = Math.min(a.y, b.y, c.y)\r\n            let maxY = Math.max(a.y, b.y, c.y)\r\n\r\n            for (let y = minY; y <= maxY; y++){\r\n                for (let x = minX; x <= maxX; x++){\r\n                    let barycentric = this.Barycentric(a, b, c, new Vector3D(x, y, 0))\r\n\r\n                    if (barycentric.x > 0 && barycentric.y > 0 && barycentric.z > 0){\r\n                        this.addPoint(x, y)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public fillTriangle(a: Vector3D, b: Vector3D, c: Vector3D): void {\r\n\r\n            let x0 = a.x\r\n            let y0 = a.y\r\n            let x1 = b.x\r\n            let y1 = b.y\r\n            let x2 = c.x\r\n            let y2 = c.y\r\n\r\n            // sort points by y\r\n            // devide triangle on two parts\r\n            // fill first part\r\n            // fill second part\r\n            // user ctg to find x\r\n            \r\n            if (x0 == x1 && x1 == x2) {\r\n                return\r\n            }\r\n\r\n            if (y0 == y1 && y1 == y2) {\r\n                return\r\n            }\r\n\r\n            if (y1 < y0) {\r\n                [x0, x1] = [x1, x0];\r\n                [y0, y1] = [y1, y0];\r\n            }\r\n\r\n            if (y2 < y0) {\r\n                [x0, x2] = [x2, x0];\r\n                [y0, y2] = [y2, y0];\r\n            }\r\n\r\n            if (y2 < y1) {\r\n                [x1, x2] = [x2, x1];\r\n                [y1, y2] = [y2, y1];\r\n            }\r\n\r\n            let ctgA = (x2 - x0) / (y2 - y0);\r\n            let ctgB = y1 != y0 ? (x1 - x0) / (y1 - y0) : 0;\r\n            let ctgC = y2 != y1 ? (x2 - x1) / (y2 - y1) : 0;\r\n\r\n            let xA = x0;\r\n            let xB = x0;\r\n            let xC = x1;\r\n\r\n            let xFrom, xTo;\r\n\r\n            for (let y = y0;; y++) {\r\n                xFrom = Math.round(xA);\r\n                xTo = y < y1 ? Math.round(xB) : Math.round(xC);\r\n                if (xTo < xFrom) {\r\n                    [xFrom, xTo] = [xTo, xFrom];\r\n                }\r\n                for (let x = xFrom; x <= xTo; x++) {\r\n                    let barycentric = this.Barycentric(a, b, c, new Vector3D(x, y, 0))\r\n                    if (barycentric != null){\r\n                        let pz = a.z * barycentric.x + b.z * barycentric.y + c.z * barycentric.z\r\n                        let index = y * this.width + x\r\n\r\n                        if (pz > this.zBuffer[index]){\r\n                            this.addPoint(x, y)\r\n                            this.zBuffer[index] = pz\r\n                        }\r\n                    }\r\n                }\r\n        \r\n                if (y >= y2) {\r\n                    break;\r\n                }\r\n        \r\n                xA += ctgA;\r\n                if (y < y1) {\r\n                    xB += ctgB;\r\n                }\r\n                else {\r\n                    xC += ctgC;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        public clear(): void {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (let y = 0; y < this.height; y++) {\r\n                    this.data[y * this.width + x] = this.int24Color\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public show(): void {\r\n            this.imageData.data.set(this.buf8)\r\n            this.context.putImageData(this.imageData, 0, 0)\r\n        }\r\n\r\n\r\n        public startDraw(): void {\r\n        }\r\n\r\n\r\n        public endDraw(): void {}\r\n\r\n        public setFpsLimit(fps: number): void {\r\n            fpsInterval = 1000 / fps\r\n        }\r\n\r\n        public startAnimation(): void {\r\n            requestAnimationFrame(this.startAnimation.bind(this))\r\n\r\n            now = Date.now()\r\n            elapsed = now - then\r\n            if(elapsed > fpsInterval){\r\n                then = now - (elapsed % fpsInterval)\r\n                this.update()\r\n            }\r\n        }\r\n\r\n        public setUpdate(update: () => void): void {\r\n            this.update = update\r\n        }\r\n\r\n        public endAnimation(): void {}\r\n\r\n    }\r\n\r\n\r\n","import { Vector3D } from \"./vector3D\"\r\n\r\nexport class Matrix3x3 {\r\n    m : number[][]\r\n    public constructor(m: number[][]) {\r\n        this.m = []\r\n        for (let i = 0; i < 3; i++) {\r\n            this.m[i] = []\r\n            for (let j = 0; j < 3; j++) {\r\n                this.m[i][j] = m[i][j]\r\n            }\r\n        }\r\n    }\r\n\r\n    public multiplyVector(vec: Vector3D): Vector3D {\r\n        let newVector = new Vector3D(\r\n            this.m[0][0] * vec.x + this.m[0][1] * vec.y + this.m[0][2] * vec.z,\r\n            this.m[1][0] * vec.x + this.m[1][1] * vec.y + this.m[1][2] * vec.z,\r\n            this.m[2][0] * vec.x + this.m[2][1] * vec.y + this.m[2][2] * vec.z\r\n        )\r\n\r\n        return newVector\r\n    }\r\n}","import { Color } from \"./color\"\r\nimport { Vector3D } from \"./vector3D\"\r\n\r\n\r\nexport class Triangle {\r\n\r\n    public a: Vector3D\r\n    public b: Vector3D\r\n    public c: Vector3D\r\n    public color: Color\r\n\r\n    constructor(p1: Vector3D, p2: Vector3D, p3: Vector3D, color: Color = new Color(255, 255, 255)) {\r\n        this.a = new Vector3D(p1.x, p1.y, p1.z)\r\n        this.b = new Vector3D(p2.x, p2.y, p2.z)\r\n        this.c = new Vector3D(p3.x, p3.y, p3.z)\r\n        this.color = color\r\n    }\r\n\r\n}","import { Triangle } from \"./triangle\";\r\nimport { Vector3D } from \"./vector3D\";\r\n\r\n\r\nexport class ObjParser{\r\n    public static parse(obj: string): any{\r\n\r\n        let _obj = obj.split(\"\\n\");\r\n        let _vertices = [];\r\n        let _faces = [];\r\n        let lineItems: string[] = []\r\n\r\n        for(let i = 0; i < _obj.length; i++){\r\n            let line = _obj[i]\r\n\r\n            switch (line[0]) {\r\n                case \"v\":\r\n                    lineItems = line.split(\" \")\r\n                    _vertices.push(new Vector3D(\r\n                            parseFloat(lineItems[1]),\r\n                            parseFloat(lineItems[2]),\r\n                            parseFloat(lineItems[3])\r\n                        )\r\n                    )\r\n                    break\r\n\r\n                case \"f\":\r\n                    lineItems = line.split(\" \")\r\n                    let point1Info = lineItems[1].split(\"/\")\r\n                    let point2Info = lineItems[2].split(\"/\")\r\n                    let point3Info = lineItems[3].split(\"/\")\r\n                    _faces.push(new Triangle(\r\n                            _vertices[parseInt(point1Info[0])-1],\r\n                            _vertices[parseInt(point2Info[0])-1],\r\n                            _vertices[parseInt(point3Info[0])-1]\r\n                        )\r\n                    )\r\n                    break\r\n            }\r\n        }\r\n\r\n        let _model = {\r\n            vertices: _vertices,\r\n            faces: _faces\r\n        }\r\n\r\n        return _model;\r\n    }\r\n}","\r\nimport obj from \"bundle-text:../src/obj/skull.obj\";\r\nimport { Color } from \"./core/color\";\r\nimport { Drawer } from \"./core/drawer\";\r\nimport { Matrix3x3 } from \"./core/matrix\";\r\nimport { ObjParser } from \"./core/obj.parser\";\r\nimport { Vector3D } from \"./core/vector3D\";\r\n\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement\r\nconst WIDTH = 800\r\nconst HEIGHT = 800\r\nconst PIXEL_SIZE = 1\r\nconst IS_READ_FILE = true\r\nconst IS_ANIM = true\r\n\r\nlet alpha = 0\r\nconst  drawer = new Drawer(canvas, WIDTH, HEIGHT, PIXEL_SIZE)\r\nlet model\r\n\r\n\r\n\r\nif (IS_READ_FILE) {\r\n    model = ObjParser.parse(obj)\r\n    drawModel()\r\n}else{\r\n    drawer.setColor(new Color(30, 30, 30))\r\n    drawer.clear()\r\n    drawer.setColor(new Color(200, 200, 0))\r\n    let t0 =  performance.now()\r\n    for (let i = 0; i < 1000; i++) {\r\n        drawer.fillTriangleBarycentric(new Vector3D(100, 100, 0), new Vector3D(200, 100, 0), new Vector3D(150, 200, 0))\r\n    }\r\n    let t1 =  performance.now()\r\n    console.log(\"Call to fill triangle with Barycentric took \" + (t1 - t0) + \" milliseconds.\")\r\n    drawer.setColor(new Color(200, 0, 0))\r\n    t0 = performance.now()\r\n    for (let i = 0; i < 1000; i++) {\r\n        drawer.fillTriangle(new Vector3D(100, 100, 0), new Vector3D(200, 100, 0), new Vector3D(150, 200, 0))\r\n    }\r\n    t1 = performance.now()\r\n    console.log(\"Call to fill triangle took \" + (t1 - t0) + \" milliseconds.\")\r\n    drawer.show()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// drawer.setColor(30, 30, 30)\r\n// drawer.clear()\r\n// drawer.setColor(200, 0, 0)\r\n// drawer.fillTriangle(100, 100, 200, 100, 150, 200)\r\n// drawer.show()\r\n\r\nfunction drawModel(){\r\n    \r\n    for (let triangle of model.faces) {\r\n        triangle.color = Color.getRanomColor()\r\n    }\r\n    // update()\r\n\r\n    if (IS_ANIM){\r\n        drawer.setUpdate(update)\r\n        drawer.setFpsLimit(30)\r\n        drawer.startAnimation()\r\n    }\r\n}\r\n\r\n\r\nfunction update(){\r\n    drawer.clearZBuffer()\r\n    drawer.setColor(new Color(30, 30, 30))\r\n    drawer.clear()\r\n    drawer.setColor(new Color(200, 0, 0))\r\n\r\n    for (const triangle of model.faces) {\r\n        let a: Vector3D = rotateY(triangle.a, alpha)\r\n        let b: Vector3D = rotateY(triangle.b, alpha)\r\n        let c: Vector3D = rotateY(triangle.c, alpha)\r\n\r\n        let dx = WIDTH / 2\r\n        let dy = HEIGHT / 2\r\n        let objZoom = 200\r\n\r\n\r\n        let vec1 = b.subtract(a)\r\n        let vec2 = c.subtract(a)\r\n        let normal = vec1.crossProduct(vec2)\r\n        normal.normalize()\r\n        \r\n        let minusLightDir = new Vector3D(0, 0, 1)\r\n        let intensity = minusLightDir.dotProduct(normal)\r\n\r\n        if (intensity > 0){\r\n            drawer.setColor(new Color(intensity*255, intensity*0, intensity*0))\r\n\r\n            drawer.fillTriangle(\r\n                a.multiply(objZoom).add(new Vector3D(dx, dy, 0)).round(),\r\n                b.multiply(objZoom).add(new Vector3D(dx, dy, 0)).round(),\r\n                c.multiply(objZoom).add(new Vector3D(dx, dy, 0)).round()\r\n            )\r\n        }\r\n       \r\n    }\r\n    drawer.show()\r\n    alpha += Math.PI / 180\r\n\r\n    if  (alpha > 2 * Math.PI) alpha = 0\r\n}\r\n\r\n\r\nfunction Barycentric(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n    let ab = b.subtract(a)\r\n    let ac = c.subtract(a)\r\n    let pa = a.subtract(p)\r\n\r\n    let v1 = new Vector3D(ab.x, ac.x, pa.x)\r\n    let v2 = new Vector3D(ab.y, ac.y, pa.y)\r\n    let v3 = v1.crossProduct(v2)\r\n\r\n    if (v3.z == 0) return null\r\n\r\n    let u = v3.x / v3.z\r\n    let v = v3.y / v3.z\r\n\r\n    return new Vector3D(1 - u - v, v, u)\r\n}\r\n\r\n\r\nfunction rotateY(vec: Vector3D, alpha: number): Vector3D{\r\n    let m = new Matrix3x3([\r\n            [Math.cos(alpha), 0, Math.sin(alpha)],\r\n            [0, 1, 0],\r\n            [-Math.sin(alpha), 0, Math.cos(alpha)]\r\n    ])\r\n\r\n    return m.multiplyVector(vec)\r\n    \r\n\r\n}\r\n","module.exports = \"58f7ed1ce5bdb92d\";"],"names":["$81b7e1828a93a564$export$892596cec99bc70e","constructor","r","g","b","a","this","static","_getRandomInt","max","Math","floor","random","$6e5e90a8db163ac6$export$fe203bd8c6486855","x","y","z","crossProduct","v","dotProduct","subtract","add","round","multiply","scalar","normalize","length","sqrt","$d516eefa5f69822b$var$fpsInterval","$d516eefa5f69822b$var$startTime","$d516eefa5f69822b$var$now","$d516eefa5f69822b$var$then","$d516eefa5f69822b$var$elapsed","$e5d0bc66d4d570f2$export$f0a5d927dd717bca","m","i","j","multiplyVector","vec","$4043cec9244d7ff7$export$5a465592bfe74b48","p1","p2","p3","color","c","$dee476fb77b0925a$export$cebd276add3e2509","obj","_obj","split","_vertices","_faces","lineItems","line","push","parseFloat","point1Info","point2Info","point3Info","parseInt","vertices","faces","$6fe321f8d8f01b12$var$canvas","document","getElementById","$6fe321f8d8f01b12$var$alpha","$6fe321f8d8f01b12$var$drawer","canvas","width","height","pixelSize","canvasWidth","canvasHeight","context","getContext","imageData","createImageData","currentColor","pixels","zBuffer","Array","fill","Infinity","cols","buf","ArrayBuffer","buf8","Uint8ClampedArray","data","Uint32Array","Date","now","update","clearZBuffer","setColor","int24Color","addPoint","canvasX","canvasY","pixelIndex","canvasStartX","canvasStartY","dx","dy","pixelIndex1","addLine","x0","y0","x1","y1","isInvert","abs","xLength","deltaY","stepY","doubleXLenght","addTriangle","x2","y2","Barycentric","p","ab","ac","pa","v1","v2","v3","u","fillTriangleBarycentric","minX","min","maxX","minY","maxY","barycentric","fillTriangle","xFrom","xTo","ctgA","ctgB","ctgC","xA","xB","xC","pz","index","clear","show","set","putImageData","startDraw","endDraw","setFpsLimit","fps","startAnimation","requestAnimationFrame","bind","setUpdate","endAnimation","$6fe321f8d8f01b12$var$model","$6fe321f8d8f01b12$var$update","triangle","$6fe321f8d8f01b12$var$rotateY","$6fe321f8d8f01b12$var$WIDTH","$6fe321f8d8f01b12$var$HEIGHT","objZoom","vec1","vec2","normal","intensity","PI","alpha","cos","sin","parse","$parcel$interopDefault","getRanomColor","$6fe321f8d8f01b12$var$drawModel"],"version":3,"file":"index.986d8d99.js.map"}