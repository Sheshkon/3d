{"mappings":"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","sources":["ts/core/drawer.ts","ts/core/vector3D.ts","ts/core/matrix.ts","ts/core/triangle.ts","ts/main.ts","ts/core/obj.parser.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-c246299b5418a164.js"],"sourcesContent":["let  stopAnimation: boolean = false\r\nlet frameCount: number = 0\r\nlet fps: number = 10, fpsInterval: number, startTime: number, now: number, then: number, elapsed: number\r\n\r\n\r\nclass Color {\r\n\r\n    public r: number;\r\n    public g: number;\r\n    public b: number;\r\n    public a: number;\r\n\r\n    constructor(r: number, g: number, b: number, a: number = 255) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n\r\n}\r\n\r\nexport class Drawer {\r\n    \r\n        private canvas: HTMLCanvasElement;\r\n        public width: number\r\n        public height: number\r\n        public canvasWidth: number\r\n        public canvasHeight: number\r\n        public pixelSize: number\r\n        public pixels: Color[][]\r\n        private context: CanvasRenderingContext2D\r\n        private imageData: ImageData\r\n        public currentColor: Color\r\n        public buf: ArrayBuffer\r\n        public buf8: Uint8ClampedArray\r\n        public data: Uint32Array\r\n        public int24Color: number\r\n        public update: () => void\r\n    \r\n        constructor(canvas: HTMLCanvasElement, width: number, height: number, pixelSize: number) {\r\n            this.canvas = canvas\r\n            this.width = width * pixelSize\r\n            this.height = height * pixelSize\r\n            this.canvasWidth = width\r\n            this.canvasHeight = height\r\n            this.pixelSize = pixelSize\r\n            this.context = this.canvas.getContext(\"2d\")\r\n            this.imageData = this.context.createImageData(this.width, this.height)\r\n            this.currentColor = new Color(0, 0, 0)\r\n            this.context.canvas.width = this.width\r\n            this.context.canvas.height = this.height\r\n            this.pixels = []\r\n\r\n            for (let i = 0; i < this.width; i++) {\r\n                let cols = []\r\n                for (let j = 0; j < this.height; j++) {\r\n                    cols.push(new Color(0, 0, 0))\r\n                }\r\n                this.pixels.push(cols)\r\n            }\r\n\r\n            this.buf = new ArrayBuffer(this.width * this.height * 4)\r\n            this.buf8 = new Uint8ClampedArray(this.buf)\r\n            this.data = new Uint32Array(this.buf)\r\n\r\n            fpsInterval = 1000 / fps\r\n            then = Date.now()\r\n            startTime = then\r\n            this.update = () => {}\r\n        \r\n        }\r\n      \r\n        public setColor(r: number, g: number, b: number, a: number = 255): void{\r\n           this.currentColor = new Color(r, g, b, a)\r\n           this.int24Color = (255 << 24) | (b << 16) | (g << 8) | r\r\n        }\r\n\r\n\r\n        public addPoint(x: number, y: number): void {\r\n            let canvasX = x;\r\n            let canvasY = this.canvasHeight - y - 1;\r\n            if (this.pixelSize == 1) {\r\n                let pixelIndex = canvasY * this.width + canvasX;\r\n                this.data[pixelIndex] = this.int24Color;\r\n                return;\r\n            }\r\n            \r\n            const canvasStartX = canvasX * this.pixelSize;\r\n            const canvasStartY = canvasY * this.pixelSize;\r\n            for (var dx = 0; dx < this.pixelSize; dx++) {\r\n                for (var dy = 0; dy < this.pixelSize; dy++) {\r\n                    let pixelIndex = (canvasStartY + dy) * this.width + canvasStartX + dx; \r\n                    this.data[pixelIndex] = this.int24Color;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        public addLine(x0: number, y0: number , x1: number, y1: number): void{\r\n            // y = kx + b\r\n            // setpY = k = (y1 - y0) / (x1 - x0)\r\n            // b = y0 - kx0\r\n            // Bresenham's line algorithm\r\n            \r\n            let isInvert = false\r\n        \r\n            if (Math.abs(y1 - y0) > Math.abs(x1 - x0)) {\r\n                [x0, y0] = [y0, x0];\r\n                [x1, y1] = [y1, x1];\r\n                isInvert = true\r\n            }\r\n        \r\n            if (x1 < x0) {\r\n                [x0, x1] = [x1, x0];\r\n                [y0, y1] = [y1, y0];\r\n            }\r\n        \r\n            let xLength = x1 - x0\r\n            let deltaY = 0\r\n            let stepY = 2 * Math.abs((y1 - y0))\r\n            let y = y0\r\n            let dy = y1 > y0 ? 1 : -1\r\n            let doubleXLenght = 2 * xLength\r\n        \r\n            for (let x = x0; x <= x1; x++) {\r\n                this.addPoint(isInvert ? y : x, isInvert ? x : y)\r\n                deltaY += stepY\r\n                if (deltaY > xLength) {\r\n                    y += dy\r\n                    deltaY -= doubleXLenght\r\n                }\r\n        \r\n            }\r\n        }\r\n\r\n\r\n        public addTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): void {\r\n            this.addLine(x0, y0, x1, y1)\r\n            this.addLine(x1, y1, x2, y2)\r\n            this.addLine(x2, y2, x0, y0)\r\n        }\r\n\r\n\r\n        public clear(): void {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (let y = 0; y < this.height; y++) {\r\n                    this.data[y * this.width + x] = this.int24Color\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public show(): void {\r\n            this.imageData.data.set(this.buf8)\r\n            this.context.putImageData(this.imageData, 0, 0)\r\n        }\r\n\r\n\r\n        public startDraw(): void {\r\n        }\r\n\r\n\r\n        public endDraw(): void {}\r\n\r\n        public setFpsLimit(fps: number): void {\r\n            fpsInterval = 1000 / fps\r\n        }\r\n\r\n        public startAnimation(): void {\r\n            requestAnimationFrame(this.startAnimation.bind(this))\r\n\r\n            now = Date.now()\r\n            elapsed = now - then\r\n            if(elapsed > fpsInterval){\r\n                then = now - (elapsed % fpsInterval)\r\n                this.update()\r\n            }\r\n        }\r\n\r\n        public setUpdate(update: () => void): void {\r\n            this.update = update\r\n        }\r\n\r\n        public endAnimation(): void {}\r\n\r\n    }\r\n\r\n\r\n","export class Vector3D {\r\n\r\n    x: number\r\n    y: number\r\n    z: number\r\n\r\n    constructor(x: number, y: number, z:number) {\r\n        this.x = x\r\n        this.y = y\r\n        this.z = z\r\n    }\r\n\r\n    public crossProduct(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\r\n    }\r\n\r\n    public dotProduct(v: Vector3D): number { \r\n        return this.x * v.x + this.y * v.y + this.z * v.z\r\n    }\r\n\r\n    public subtract(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x - v.x, this.y - v.y, this.z - v.z)\r\n    }\r\n\r\n    public normolize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n            this.z /= length\r\n        }\r\n    }\r\n}\r\n","import { Vector3D } from \"./vector3D\"\r\n\r\nexport class Matrix3x3 {\r\n    m : number[][]\r\n    public constructor(m: number[][]) {\r\n        this.m = []\r\n        for (let i = 0; i < 3; i++) {\r\n            this.m[i] = []\r\n            for (let j = 0; j < 3; j++) {\r\n                this.m[i][j] = m[i][j]\r\n            }\r\n        }\r\n    }\r\n\r\n    public multiplyVector(vec: Vector3D): Vector3D {\r\n        let newVector = new Vector3D(\r\n            this.m[0][0] * vec.x + this.m[0][1] * vec.y + this.m[0][2] * vec.z,\r\n            this.m[1][0] * vec.x + this.m[1][1] * vec.y + this.m[1][2] * vec.z,\r\n            this.m[2][0] * vec.x + this.m[2][1] * vec.y + this.m[2][2] * vec.z\r\n        )\r\n\r\n        return newVector\r\n    }\r\n}","import { Vector3D } from \"./vector3D\"\r\n\r\n\r\nexport class Triangle {\r\n\r\n    public a: Vector3D\r\n    public b: Vector3D\r\n    public c: Vector3D\r\n\r\n    constructor(p1: Vector3D, p2: Vector3D, p3: Vector3D) {\r\n        this.a = new Vector3D(p1.x, p1.y, p1.z)\r\n        this.b = new Vector3D(p2.x, p2.y, p2.z)\r\n        this.c = new Vector3D(p3.x, p3.y, p3.z)\r\n    }\r\n\r\n}","\r\nimport obj from \"bundle-text:../src/obj/sphere.obj\";\r\nimport { Drawer } from \"./core/drawer\";\r\nimport { Matrix3x3 } from \"./core/matrix\";\r\nimport { ObjParser } from \"./core/obj.parser\";\r\nimport { Vector3D } from \"./core/vector3D\";\r\n\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement\r\nconst WIDTH = 800\r\nconst HEIGHT = 800\r\nconst PIXEL_SIZE = 1\r\nlet alpha = 0\r\n\r\nlet drawer = new Drawer(canvas, WIDTH, HEIGHT, PIXEL_SIZE)\r\n\r\nlet model = ObjParser.parse(obj)\r\ndrawModel()\r\n\r\nfunction drawModel(){\r\n    drawer.setUpdate(update)\r\n    drawer.setFpsLimit(60)\r\n    drawer.startAnimation()\r\n}\r\n\r\n\r\nfunction update(){\r\n    drawer.setColor(30, 30, 30)\r\n    drawer.clear()\r\n    drawer.setColor(200, 0, 0)\r\n\r\n    for (const triangle of model.faces) {\r\n        let a = rotateY(triangle.a, alpha)\r\n        let b = rotateY(triangle.b, alpha)\r\n        let c = rotateY(triangle.c, alpha)\r\n\r\n        let dx = WIDTH / 2\r\n        let dy = HEIGHT / 2\r\n        let objZoom = 200\r\n\r\n        drawer.addTriangle(\r\n            Math.round(a.x*objZoom+dx), Math.round(a.y*objZoom+dy),\r\n            Math.round(b.x*objZoom+dx), Math.round(b.y*objZoom+dy),\r\n            Math.round(c.x*objZoom+dx), Math.round(c.y*objZoom+dy)\r\n        )\r\n    }\r\n    drawer.show()\r\n    alpha += Math.PI / 180\r\n\r\n    if  (alpha > 2 * Math.PI) alpha = 0\r\n}\r\n\r\n\r\n\r\nfunction rotateY(vec: Vector3D, alpha: number): Vector3D{\r\n    let m = new Matrix3x3([\r\n            [Math.cos(alpha), 0, Math.sin(alpha)],\r\n            [0, 1, 0],\r\n            [-Math.sin(alpha), 0, Math.cos(alpha)]\r\n    ])\r\n\r\n    return m.multiplyVector(vec)\r\n    \r\n\r\n}","import { Triangle } from \"./triangle\";\r\nimport { Vector3D } from \"./vector3D\";\r\n\r\n\r\nexport class ObjParser{\r\n    public static parse(obj: string): any{\r\n\r\n        let _obj = obj.split(\"\\n\");\r\n        let _vertices = [];\r\n        let _faces = [];\r\n        let lineItems: string[] = []\r\n\r\n        for(let i = 0; i < _obj.length; i++){\r\n            let line = _obj[i]\r\n            console.log(line)\r\n            switch (line[0]) {\r\n                case \"v\":\r\n                    lineItems = line.split(\" \")\r\n                    _vertices.push(new Vector3D(\r\n                            parseFloat(lineItems[1]),\r\n                            parseFloat(lineItems[2]),\r\n                            parseFloat(lineItems[3])\r\n                        )\r\n                    )\r\n                    break\r\n\r\n                case \"f\":\r\n                    lineItems = line.split(\" \")\r\n                    let point1Info = lineItems[1].split(\"/\")\r\n                    let point2Info = lineItems[2].split(\"/\")\r\n                    let point3Info = lineItems[3].split(\"/\")\r\n                    _faces.push(new Triangle(\r\n                            _vertices[parseInt(point1Info[0])-1],\r\n                            _vertices[parseInt(point2Info[0])-1],\r\n                            _vertices[parseInt(point3Info[0])-1]\r\n                        )\r\n                    )\r\n                    break\r\n            }\r\n        }\r\n\r\n        let _model = {\r\n            vertices: _vertices,\r\n            faces: _faces\r\n        }\r\n\r\n        console.log(_model)\r\n\r\n        return _model;\r\n    }\r\n}","module.exports = \"eeff33cfe45bce2f\";"],"names":["$d516eefa5f69822b$var$fpsInterval","$d516eefa5f69822b$var$startTime","$d516eefa5f69822b$var$now","$d516eefa5f69822b$var$then","$d516eefa5f69822b$var$elapsed","$d516eefa5f69822b$var$Color","constructor","r","g","b","a","this","$6e5e90a8db163ac6$export$fe203bd8c6486855","x","y","z","crossProduct","v","dotProduct","subtract","normolize","length","Math","sqrt","$e5d0bc66d4d570f2$export$f0a5d927dd717bca","m","i","j","multiplyVector","vec","$4043cec9244d7ff7$export$5a465592bfe74b48","p1","p2","p3","c","$6fe321f8d8f01b12$var$canvas","document","getElementById","$6fe321f8d8f01b12$var$alpha","$6fe321f8d8f01b12$var$drawer","canvas","width","height","pixelSize","canvasWidth","canvasHeight","context","getContext","imageData","createImageData","currentColor","pixels","cols","push","buf","ArrayBuffer","buf8","Uint8ClampedArray","data","Uint32Array","Date","now","update","setColor","int24Color","addPoint","canvasX","canvasY","pixelIndex","canvasStartX","canvasStartY","dx","dy","pixelIndex1","addLine","x0","y0","x1","y1","isInvert","abs","xLength","deltaY","stepY","doubleXLenght","addTriangle","x2","y2","clear","show","set","putImageData","startDraw","endDraw","setFpsLimit","fps","startAnimation","requestAnimationFrame","bind","setUpdate","endAnimation","$6fe321f8d8f01b12$var$model","static","obj","_obj","split","_vertices","_faces","lineItems","line","console","log","parseFloat","point1Info","point2Info","point3Info","parseInt","_model","vertices","faces","parse","$parcel$interopDefault","$6fe321f8d8f01b12$var$update","triangle","$6fe321f8d8f01b12$var$rotateY","$6fe321f8d8f01b12$var$WIDTH","$6fe321f8d8f01b12$var$HEIGHT","objZoom","round","PI","alpha","cos","sin"],"version":3,"file":"index.d779a786.js.map"}