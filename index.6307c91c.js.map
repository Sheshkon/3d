{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-562c78d31a0ea9bd.js","node_modules/@parcel/runtime-js/lib/runtime-c69a22def5152bf4.js","node_modules/@parcel/runtime-js/lib/runtime-4f6395594a81ec50.js","ts/core/color.ts","ts/core/vector.ts","ts/core/drawer.ts","ts/core/matrix.ts","ts/core/model.ts","ts/core/triangle.ts","ts/core/obj.parser.ts","ts/core/texture.color.parser.ts","ts/main.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-051b4ff0f178162e.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-366cf04d1040ae5f.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1HMsc\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"03OkI\")).toString();","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"cilmO\\\":\\\"index.6307c91c.js\\\",\\\"1HMsc\\\":\\\"shiba2.600216fc.png\\\",\\\"03OkI\\\":\\\"texture.3730b696.png\\\"}\"));","export class Color {\r\n\r\n    public r: number;\r\n    public g: number;\r\n    public b: number;\r\n    public a: number;\r\n\r\n    constructor(r: number, g: number, b: number, a: number = 255) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n\r\n    public static getRanomColor(): Color {\r\n        return new Color(this._getRandomInt(255), this._getRandomInt(255), this._getRandomInt(255))\r\n    }\r\n\r\n    private static  _getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * Math.floor(max+1));\r\n    }\r\n\r\n}\r\n","export class Vector2D{\r\n    x: number\r\n    y: number\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n\r\n    public subtract(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x - v.x, this.y - v.y)\r\n    }\r\n\r\n    public add(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x + v.x, this.y + v.y)\r\n    }\r\n\r\n    public round(): Vector2D {\r\n        return new Vector2D(Math.round(this.x), Math.round(this.y))\r\n    }\r\n\r\n    public multiply(scalar: number): Vector2D {\r\n        return new Vector2D(this.x * scalar, this.y * scalar)\r\n    }\r\n\r\n    public normalize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class Vector3D extends Vector2D {\r\n    z: number\r\n\r\n    constructor(x: number, y: number, z: number) {\r\n        super(x, y)\r\n        this.z = z\r\n    }\r\n  \r\n\r\n    // right hand coordinate system\r\n    public crossProduct(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\r\n    }\r\n\r\n    public dotProduct(v: Vector3D): number { \r\n        return this.x * v.x + this.y * v.y + this.z * v.z\r\n    }\r\n\r\n    public subtract(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x - v.x, this.y - v.y, this.z - v.z)\r\n    }\r\n\r\n    public add(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x + v.x, this.y + v.y, this.z + v.z)\r\n    }\r\n\r\n    public round(): Vector3D {\r\n        return new Vector3D(Math.round(this.x), Math.round(this.y), Math.round(this.z))\r\n    }\r\n\r\n    public multiply(scalar: number): Vector3D {\r\n        return new Vector3D(this.x * scalar, this.y * scalar, this.z * scalar)\r\n    }\r\n\r\n    public normalize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n            this.z /= length\r\n        }\r\n    }\r\n}\r\n","import { Color } from \"./color\";\r\nimport { Triangle } from \"./triangle\";\r\nimport { Vector3D } from \"./vector\";\r\n\r\nlet  stopAnimation: boolean = false\r\nlet frameCount: number = 0\r\nlet fps: number = 10, fpsInterval: number, startTime: number, now: number, then: number, elapsed: number\r\n\r\n\r\nexport class Drawer {\r\n    \r\n        private canvas: HTMLCanvasElement;\r\n        public width: number\r\n        public height: number\r\n        public canvasWidth: number\r\n        public canvasHeight: number\r\n        public pixelSize: number\r\n        public pixels: Color[][]\r\n        private context: CanvasRenderingContext2D\r\n        private imageData: ImageData\r\n        public currentColor: Color\r\n        public buf: ArrayBuffer\r\n        public buf8: Uint8ClampedArray\r\n        public data: Uint32Array\r\n        public int24Color: number\r\n        public update: () => void\r\n        public zBuffer: number[]\r\n        public textureBuffer: Uint8ClampedArray\r\n        public textureBufferWidth: number\r\n        public textureBufferHeight: number\r\n        public textureBufferLength: number\r\n    \r\n        constructor(canvas: HTMLCanvasElement, width: number, height: number, pixelSize: number) {\r\n            this.canvas = canvas\r\n            this.width = width * pixelSize\r\n            this.height = height * pixelSize\r\n            this.canvasWidth = width\r\n            this.canvasHeight = height\r\n            this.pixelSize = pixelSize\r\n            this.context = this.canvas.getContext(\"2d\")\r\n            this.imageData = this.context.createImageData(this.width, this.height)\r\n            this.currentColor = new Color(0, 0, 0)\r\n            this.context.canvas.width = this.width\r\n            this.context.canvas.height = this.height\r\n            this.pixels = []\r\n            this.zBuffer = new Array(this.width * this.height).fill(-Infinity)\r\n\r\n            for (let i = 0; i < this.width; i++) {\r\n                let cols = []\r\n                for (let j = 0; j < this.height; j++) {\r\n                    cols.push(new Color(0, 0, 0))\r\n                }\r\n                this.pixels.push(cols)\r\n            }\r\n\r\n            this.buf = new ArrayBuffer(this.width * this.height * 4)\r\n            this.buf8 = new Uint8ClampedArray(this.buf)\r\n            this.data = new Uint32Array(this.buf)\r\n\r\n            fpsInterval = 1000 / fps\r\n            then = Date.now()\r\n            startTime = then\r\n            this.update = () => {}\r\n        \r\n        }\r\n\r\n        public clearZBuffer(): void{\r\n            this.zBuffer = new Array(this.width * this.height).fill(-Infinity)\r\n        }\r\n      \r\n        public setColor(color: Color): void{\r\n           this.currentColor = color\r\n           this.int24Color = (255 << 24) | (color.b << 16) | (color.g << 8) | color.r\r\n        }\r\n\r\n        public addPoint(x: number, y: number): void {\r\n            let canvasX = x;\r\n            let canvasY = this.canvasHeight - y - 1;\r\n            if (this.pixelSize == 1) {\r\n                let pixelIndex = canvasY * this.width + canvasX;\r\n                this.data[pixelIndex] = this.int24Color;\r\n                return;\r\n            }\r\n            \r\n            const canvasStartX = canvasX * this.pixelSize;\r\n            const canvasStartY = canvasY * this.pixelSize;\r\n            for (var dx = 0; dx < this.pixelSize; dx++) {\r\n                for (var dy = 0; dy < this.pixelSize; dy++) {\r\n                    let pixelIndex = (canvasStartY + dy) * this.width + canvasStartX + dx; \r\n                    this.data[pixelIndex] = this.int24Color;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        public addLine(x0: number, y0: number , x1: number, y1: number): void{\r\n            // y = kx + b\r\n            // setpY = k = (y1 - y0) / (x1 - x0)\r\n            // b = y0 - kx0\r\n            // Bresenham's line algorithm\r\n            \r\n            let isInvert = false\r\n        \r\n            if (Math.abs(y1 - y0) > Math.abs(x1 - x0)) {\r\n                [x0, y0] = [y0, x0];\r\n                [x1, y1] = [y1, x1];\r\n                isInvert = true\r\n            }\r\n        \r\n            if (x1 < x0) {\r\n                [x0, x1] = [x1, x0];\r\n                [y0, y1] = [y1, y0];\r\n            }\r\n        \r\n            let xLength = x1 - x0\r\n            let deltaY = 0\r\n            let stepY = 2 * Math.abs((y1 - y0))\r\n            let y = y0\r\n            let dy = y1 > y0 ? 1 : -1\r\n            let doubleXLenght = 2 * xLength\r\n        \r\n            for (let x = x0; x <= x1; x++) {\r\n                this.addPoint(isInvert ? y : x, isInvert ? x : y)\r\n                deltaY += stepY\r\n                if (deltaY > xLength) {\r\n                    y += dy\r\n                    deltaY -= doubleXLenght\r\n                }\r\n        \r\n            }\r\n        }\r\n\r\n\r\n        public addTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): void {\r\n            this.addLine(x0, y0, x1, y1)\r\n            this.addLine(x1, y1, x2, y2)\r\n            this.addLine(x2, y2, x0, y0)\r\n        }\r\n\r\n        public Barycentric(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n            let ab = b.subtract(a)\r\n            let ac = c.subtract(a)\r\n            let pa = a.subtract(p)\r\n        \r\n            let v1 = new Vector3D(ab.x, ac.x, pa.x)\r\n            let v2 = new Vector3D(ab.y, ac.y, pa.y)\r\n            let v3 = v1.crossProduct(v2)\r\n        \r\n            if (v3.z == 0) return null\r\n        \r\n            let u = v3.x / v3.z\r\n            let v = v3.y / v3.z\r\n        \r\n            return new Vector3D(1 - u - v, v, u)\r\n        }\r\n\r\n        public Barycentric1(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n            let ab = b.subtract(a)\r\n            let ac = c.subtract(a)\r\n            let pa = a.subtract(p)\r\n\r\n            const dot00 = ac.dotProduct(ac)\r\n            const dot01 = ac.dotProduct(ab)\r\n            const dot02 = ac.dotProduct(pa)\r\n            const dot11 = ab.dotProduct(ab)\r\n            const dot12 = ab.dotProduct(pa)\r\n\r\n            const denom = dot00 * dot11 - dot01 * dot01\r\n\r\n            if (denom == 0) return null\r\n\r\n            const invDenom = 1 / denom\r\n\r\n            const u = (dot11 * dot02 - dot01 * dot12) * invDenom\r\n            const v = (dot00 * dot12 - dot01 * dot02) * invDenom\r\n\r\n            return new Vector3D(1 - u - v, v, u)\r\n\r\n        }\r\n\r\n        public Barycentric2(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n                let v0 = b.subtract(a)\r\n                let v1 = c.subtract(a)\r\n                let v2 = p.subtract(a)\r\n\r\n                let d00 = v0.dotProduct(v0)\r\n                let d01 = v0.dotProduct(v1)\r\n                let d11 = v1.dotProduct(v1)\r\n                let d20 = v2.dotProduct(v0)\r\n                let d21 = v2.dotProduct(v1)\r\n\r\n                let denom = d00 * d11 - d01 * d01\r\n                \r\n                if (denom == 0) return null\r\n\r\n                let v = (d11 * d20 - d01 * d21) / denom\r\n                let w = (d00 * d21 - d01 * d20) / denom\r\n                let u = 1 - v - w\r\n\r\n                return new Vector3D(u, v, w)\r\n\r\n\r\n            }\r\n\r\n        private _findMinMax(a: number, b: number, c: number): [number ,number]{\r\n            let min = a\r\n            let max = a\r\n\r\n            if (b < min) min = b\r\n            if (c < min) min = c\r\n            if (b > max) max = b\r\n            if (c > max) max = c\r\n\r\n            return [min, max]\r\n        }\r\n\r\n        public fillTriangleBarycentric(a: Vector3D, b:Vector3D, c: Vector3D, textureTriangle: Triangle = null, intensity = 1): void {\r\n            const [minX, maxX] = this._findMinMax(a.x, b.x, c.x)\r\n            const [minY, maxY] = this._findMinMax(a.y, b.y, c.y)\r\n\r\n            for (let y = minY; y <= maxY; y++){\r\n                for (let x = minX; x <= maxX; x++){\r\n                    \r\n                    let barycentric = this.Barycentric(a, b, c, new Vector3D(x, y, 0))\r\n                    let index = y * this.width + x\r\n                    if (barycentric == null){\r\n                        continue\r\n                    }\r\n                    let pz = a.z * barycentric.x + b.z * barycentric.y + c.z * barycentric.z\r\n\r\n                    if (pz <= this.zBuffer[index]){\r\n                        continue\r\n                    }\r\n                    if (barycentric.x > 0 && barycentric.y > 0 && barycentric.z > 0){\r\n                        this.addPoint(x, y)\r\n\r\n                        let uv = this.interpolation(textureTriangle, barycentric)\r\n                        // console.log(textureTriangle)\r\n                        // console.log(uv)\r\n                        // console.log('coords:',  uv.x * 64, uv.y * 64)\r\n                        // console.log(uv.x * 1024, uv.y * 1024)\r\n                        let rIndx = 4 *(Math.ceil(uv.x*1024)  + Math.ceil(uv.y * 1024)*1024)\r\n                        // console.log(rIndx)\r\n\r\n                        // console.log(rIndx)\r\n                        let c = new Color(this.textureBuffer[rIndx]*intensity, this.textureBuffer[rIndx+1]*intensity, this.textureBuffer[rIndx+1]*intensity)\r\n                        // console.log('color', c)\r\n                        this.setColor(c)\r\n                    // }\r\n                    \r\n                    this.addPoint(x, y)\r\n                    this.zBuffer[index] = pz\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public interpolation(textureTriangle: Triangle, barycentric: Vector3D): Vector3D {\r\n\r\n            // console.log(barycentric.x + barycentric.y + barycentric.z)\r\n            let texturePoint = \r\n                textureTriangle.a.multiply(barycentric.x).add(\r\n                    textureTriangle.b.multiply(barycentric.y).add(\r\n                        textureTriangle.c.multiply(barycentric.z)\r\n                )\r\n                )\r\n            return texturePoint\r\n        }\r\n\r\n        public fillTriangle(a: Vector3D, b: Vector3D, c: Vector3D, textureTriangle: Triangle = null, intensity: number = 1): void {\r\n\r\n            let x0 = a.x\r\n            let y0 = a.y\r\n            let x1 = b.x\r\n            let y1 = b.y\r\n            let x2 = c.x\r\n            let y2 = c.y\r\n\r\n            // sort points by y\r\n            // devide triangle on two parts\r\n            // fill first part\r\n            // fill second part\r\n            // user ctg to find x\r\n            \r\n            if (x0 == x1 && x1 == x2) {\r\n                return\r\n            }\r\n\r\n            if (y0 == y1 && y1 == y2) {\r\n                return\r\n            }\r\n\r\n            if (y1 < y0) {\r\n                [x0, x1] = [x1, x0];\r\n                [y0, y1] = [y1, y0];\r\n            }\r\n\r\n            if (y2 < y0) {\r\n                [x0, x2] = [x2, x0];\r\n                [y0, y2] = [y2, y0];\r\n            }\r\n\r\n            if (y2 < y1) {\r\n                [x1, x2] = [x2, x1];\r\n                [y1, y2] = [y2, y1];\r\n            }\r\n\r\n            let ctgA = (x2 - x0) / (y2 - y0);\r\n            let ctgB = y1 != y0 ? (x1 - x0) / (y1 - y0) : 0;\r\n            let ctgC = y2 != y1 ? (x2 - x1) / (y2 - y1) : 0;\r\n\r\n            let xA = x0;\r\n            let xB = x0;\r\n            let xC = x1;\r\n\r\n            let xFrom, xTo;\r\n\r\n            for (let y = y0;; y++) {\r\n                xFrom = Math.round(xA);\r\n                xTo = y < y1 ? Math.round(xB) : Math.round(xC);\r\n                if (xTo < xFrom) {\r\n                    [xFrom, xTo] = [xTo, xFrom];\r\n                }\r\n                for (let x = xFrom; x <= xTo; x++) {\r\n                    let barycentric = this.Barycentric(a, b, c, new Vector3D(x, y, 0))\r\n                    if (barycentric != null){\r\n                        let pz = a.z * barycentric.x + b.z * barycentric.y + c.z * barycentric.z\r\n                        let index = y * this.width + x\r\n\r\n                        // let uv = this.fromBarycentricTo(barycentric, textureTriangle.a.multiply(64), textureTriangle.b.multiply(64), textureTriangle.c.multiply(64))\r\n                               \r\n                        if (pz > this.zBuffer[index]){\r\n                            if (textureTriangle != null) {\r\n\r\n\r\n                                let uv = this.interpolation(textureTriangle, barycentric)\r\n                                let uvX = uv.x*this.textureBufferWidth\r\n                                let uvY = uv.y*this.textureBufferHeight\r\n\r\n                                \r\n                                let rIndx = this.textureBufferLength - 4 *(Math.ceil(uvX)  + Math.ceil(uvY)*this.textureBufferWidth)\r\n                                \r\n                                // console.log(rIndx)\r\n\r\n                                // console.log(rIndx)\r\n                                let c = new Color(this.textureBuffer[rIndx]*intensity, this.textureBuffer[rIndx+1]*intensity, this.textureBuffer[rIndx+1]*intensity)\r\n                                // console.log('color', c)\r\n                                this.setColor(c)\r\n                            }\r\n                            this.addPoint(x, y)\r\n                            this.zBuffer[index] = pz\r\n                        }\r\n                    }\r\n                }\r\n        \r\n                if (y >= y2) {\r\n                    break;\r\n                }\r\n        \r\n                xA += ctgA;\r\n                if (y < y1) {\r\n                    xB += ctgB;\r\n                }\r\n                else {\r\n                    xC += ctgC;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        public clear(): void {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (let y = 0; y < this.height; y++) {\r\n                    this.data[y * this.width + x] = this.int24Color\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public show(): void {\r\n            this.imageData.data.set(this.buf8)\r\n            this.context.putImageData(this.imageData, 0, 0)\r\n        }\r\n\r\n\r\n        public startDraw(): void {\r\n        }\r\n\r\n\r\n        public endDraw(): void {}\r\n\r\n        public setFpsLimit(fps: number): void {\r\n            fpsInterval = 1000 / fps\r\n        }\r\n\r\n        public startAnimation(): void {\r\n            requestAnimationFrame(this.startAnimation.bind(this))\r\n\r\n            now = Date.now()\r\n            elapsed = now - then\r\n            if(elapsed > fpsInterval){\r\n                then = now - (elapsed % fpsInterval)\r\n                this.update()\r\n            }\r\n        }\r\n\r\n        public setUpdate(update: () => void): void {\r\n            this.update = update\r\n        }\r\n\r\n        public endAnimation(): void {}\r\n\r\n    }\r\n\r\n\r\n","import { Vector3D } from \"./vector\"\r\n\r\nexport class Matrix3x3 {\r\n    m : number[][]\r\n    public constructor(m: number[][]) {\r\n        this.m = []\r\n        for (let i = 0; i < 3; i++) {\r\n            this.m[i] = []\r\n            for (let j = 0; j < 3; j++) {\r\n                this.m[i][j] = m[i][j]\r\n            }\r\n        }\r\n    }\r\n\r\n    public multiplyVector(vec: Vector3D): Vector3D {\r\n        let newVector = new Vector3D(\r\n            this.m[0][0] * vec.x + this.m[0][1] * vec.y + this.m[0][2] * vec.z,\r\n            this.m[1][0] * vec.x + this.m[1][1] * vec.y + this.m[1][2] * vec.z,\r\n            this.m[2][0] * vec.x + this.m[2][1] * vec.y + this.m[2][2] * vec.z\r\n        )\r\n\r\n        return newVector\r\n    }\r\n}","import { Triangle } from \"./triangle\"\r\n\r\nexport class Model {\r\n    public mesh: Triangle[] = []\r\n    public textureCords: Triangle[] = []\r\n    public normals: Triangle[] = []\r\n    public length: number\r\n    public texture: Uint8ClampedArray\r\n\r\n    public constructor(mesh: Triangle[], textureCords: Triangle[], normals: Triangle[], texture: any){\r\n        if (mesh.length != textureCords.length || mesh.length != normals.length)\r\n            throw new Error(\"Mesh, texture cords and normals must have the same length\")\r\n        \r\n        this.length = mesh.length\r\n        this.mesh = mesh\r\n        this.textureCords = textureCords\r\n        this.normals = normals\r\n        this.texture = texture\r\n    }\r\n\r\n}","import { Color } from \"./color\"\r\nimport { Vector3D } from \"./vector\"\r\n\r\n\r\nexport class Triangle {\r\n\r\n    public a: Vector3D\r\n    public b: Vector3D\r\n    public c: Vector3D\r\n   \r\n    constructor(p1: Vector3D, p2: Vector3D, p3: Vector3D) {\r\n        this.a = new Vector3D(p1.x, p1.y, p1.z)\r\n        this.b = new Vector3D(p2.x, p2.y, p2.z)\r\n        this.c = new Vector3D(p3.x, p3.y, p3.z)\r\n    }\r\n\r\n}","import { Model } from \"./model\";\r\nimport { Triangle } from \"./triangle\";\r\nimport { Vector3D } from \"./vector\";\r\n\r\n\r\nexport class ObjParser{\r\n    public static parse(obj: string): {mesh: Triangle[], textureCords: Triangle[], normals: Triangle[]}{\r\n\r\n        let _obj = obj.split(\"\\n\");\r\n        let _vertices = [];\r\n        let _normals = [];\r\n        let _textureCoords = [];\r\n        let mesh = []\r\n        let textureCords = []\r\n        let normals = []\r\n\r\n        let lineItems: string[] = []\r\n\r\n        for(let i = 0; i < _obj.length; i++){\r\n            let line = _obj[i]\r\n\r\n            switch (line[0]) {\r\n                case \"v\":\r\n                    lineItems = line.trim().substring(2).trim().split(\" \")\r\n                    switch (line[1]){\r\n                        case \" \":\r\n                            _vertices.push(new Vector3D(\r\n                                parseFloat(lineItems[0]),\r\n                                parseFloat(lineItems[1]),\r\n                                parseFloat(lineItems[2])\r\n                                )\r\n                            )   \r\n                        break\r\n\r\n                        case \"t\":\r\n                            _textureCoords.push(new Vector3D(\r\n                                parseFloat(lineItems[0]),\r\n                                parseFloat(lineItems[1]),\r\n                                0\r\n                                )\r\n                            )\r\n                        break\r\n\r\n                        case \"n\":\r\n                            \r\n                            _normals.push(new Vector3D(\r\n                                parseFloat(lineItems[0]),\r\n                                parseFloat(lineItems[1]),\r\n                                parseFloat(lineItems[2])\r\n                                )\r\n                            )\r\n                        break\r\n\r\n                    }\r\n                    break\r\n                    \r\n                case \"f\":\r\n                    lineItems = line.split(\" \")\r\n                    let point1Info = lineItems[1].split(\"/\")\r\n                    let point2Info = lineItems[2].split(\"/\")\r\n                    let point3Info = lineItems[3].split(\"/\")\r\n                    mesh.push(new Triangle(\r\n                        _vertices[parseInt(point1Info[0])-1],\r\n                        _vertices[parseInt(point2Info[0])-1],\r\n                        _vertices[parseInt(point3Info[0])-1]\r\n                       \r\n                    ))\r\n\r\n                    textureCords.push(new Triangle(\r\n                        _textureCoords[parseInt(point1Info[1])-1],\r\n                        _textureCoords[parseInt(point2Info[1])-1],\r\n                        _textureCoords[parseInt(point3Info[1])-1]\r\n                    ))\r\n\r\n                    normals.push(new Triangle(\r\n                        _normals[parseInt(point1Info[2])-1],\r\n                        _normals[parseInt(point2Info[2])-1],\r\n                        _normals[parseInt(point3Info[2])-1]\r\n                    ))\r\n            }\r\n        }\r\n\r\n        console.log(_textureCoords)\r\n\r\n\r\n        return {mesh: mesh, textureCords: textureCords, normals: normals}\r\n    }\r\n}","/** @param {string} source */\r\nasync function imageDataFromSource (source) {\r\n    const image = Object.assign(new Image(), { src: source });\r\n    await new Promise<void>(resolve => image.addEventListener('load', () => resolve()));\r\n    const context = Object.assign(document.createElement('canvas'), {\r\n       width: image.width,\r\n       height: image.height\r\n    }).getContext('2d');\r\n    context.imageSmoothingEnabled = false;\r\n    context.drawImage(image, 0, 0);\r\n    return context.getImageData(0, 0, image.width, image.height);\r\n }\r\n\r\n\r\nexport async function getTextureData (source) {\r\n   return await imageDataFromSource(source)\r\n}\r\n","\r\nimport obj from \"bundle-text:../src/obj/dog2.obj\";\r\nimport obj2 from \"bundle-text:../src/obj/man.obj\";\r\nimport { Color } from \"./core/color\";\r\nimport { Drawer } from \"./core/drawer\";\r\nimport { Matrix3x3 } from \"./core/matrix\";\r\nimport { Model } from \"./core/model\";\r\nimport { ObjParser } from \"./core/obj.parser\";\r\nimport { Triangle } from \"./core/triangle\";\r\nimport { Vector3D } from \"./core/vector\";\r\nimport {getTextureData} from \"./core/texture.color.parser\";\r\nimport { count } from \"console\";\r\n\r\n\r\n\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement\r\nconst WIDTH = 800\r\nconst HEIGHT = 800\r\nconst PIXEL_SIZE = 1\r\nconst IS_READ_FILE = true\r\nconst IS_ANIM = true\r\n\r\nlet alpha = 0\r\nconst drawer = new Drawer(canvas, WIDTH, HEIGHT, PIXEL_SIZE)\r\nlet model: Model\r\n\r\nlet model1 \r\nlet model2\r\n\r\nlet model1Data\r\nlet model2Data\r\n\r\nconst dx = WIDTH / 2\r\nconst dy = HEIGHT / 2\r\nconst objZoom = 300\r\nconst addedVector = new Vector3D(dx, dy, 0)\r\nconst minusLightDir = new Vector3D(0, 0, 1)\r\nlet counter = 0\r\ndocument.getElementById(\"next\").addEventListener(\"click\", () => {\r\n    console.log(\"next\");\r\n    model = counter %2 == 0 ? model2 : model1\r\n    drawer.textureBuffer = counter %2 == 0 ? model2Data.data : model1Data.data\r\n    drawer.textureBufferWidth = counter %2 == 0 ? model2Data.width : model1Data.width\r\n    drawer.textureBufferHeight = counter %2 == 0 ? model2Data.height : model1Data.height\r\n    drawer.textureBufferLength = counter %2 == 0 ? model2Data.data.length : model1Data.data.length\r\n\r\n    counter++\r\n    \r\n})\r\n\r\nif (IS_READ_FILE) {\r\n    \r\n    let parsedObj = ObjParser.parse(obj);\r\n    let parsedObj2 = ObjParser.parse(obj2)\r\n\r\n    let data: number[] = []\r\n    // textureTxt.trim()\r\n    // let texture = textureTxt.split(\"\\n\")\r\n\r\n    \r\n\r\n    // for (let i = 0; i < texture.length; i++){\r\n    //     let line = texture[i].trim().split(\" \")\r\n    //     for (let j = 0; j < line.length; j++){\r\n    //         data.push(parseInt(line[j]))\r\n    //     }\r\n    // }\r\n    let texture = new Image()\r\n    texture.src = require('../src/texture/shiba2.png')\r\n    let texture2 = new Image()\r\n    texture2.src = require('../src/texture/texture.png')\r\n\r\n    getTextureData(texture2.src).then(data => {\r\n\r\n        console.log('data', data)\r\n        model2 = new Model(parsedObj2.mesh, parsedObj2.textureCords, parsedObj2.normals, data.data);\r\n        console.log(model);\r\n        // drawer.textureBuffer = model.texture\r\n        // drawer.textureBufferWidth = data.width\r\n        // drawer.textureBufferHeight = data.height\r\n        // drawer.textureBufferLength = data.data.length\r\n        model2Data = data\r\n        // update() \r\n        // drawModel()\r\n    })\r\n\r\n\r\n    getTextureData(texture.src).then(data => {\r\n\r\n        console.log('data', data)\r\n        model = new Model(parsedObj.mesh, parsedObj.textureCords, parsedObj.normals, data.data);\r\n        model1 = new Model(parsedObj.mesh, parsedObj.textureCords, parsedObj.normals, data.data);\r\n        console.log(model);\r\n        drawer.textureBuffer = model.texture\r\n        drawer.textureBufferWidth = data.width\r\n        drawer.textureBufferHeight = data.height\r\n        drawer.textureBufferLength = data.data.length\r\n        model1Data = data\r\n        update() \r\n        drawModel()\r\n    })\r\n   \r\n}\r\n\r\n\r\nfunction drawModel(){\r\n        // update()\r\n\r\n   \r\n    if (IS_ANIM){\r\n        drawer.setUpdate(update)\r\n        drawer.setFpsLimit(30)\r\n        drawer.startAnimation()\r\n    }\r\n}\r\n\r\n\r\nfunction update(){\r\n    drawer.clearZBuffer()\r\n    drawer.setColor(new Color(30, 30, 30))\r\n    drawer.clear()\r\n    drawer.setColor(new Color(200, 0, 0))\r\n\r\n    \r\n    for (let i = 0; i < model.length; i++) {\r\n        let triangle: Triangle = model.mesh[i]\r\n        let textureCord :Triangle = model.textureCords[i]\r\n        let normals:Triangle = model.normals[i]\r\n   \r\n        let a: Vector3D = rotateY(triangle.a, alpha)\r\n        let b: Vector3D = rotateY(triangle.b, alpha)\r\n        let c: Vector3D = rotateY(triangle.c, alpha)\r\n\r\n        let vec1 = b.subtract(a)\r\n        let vec2 = c.subtract(a)\r\n        let normal = vec1.crossProduct(vec2)\r\n        normal.normalize()\r\n        \r\n       \r\n        let intensity = minusLightDir.dotProduct(normal)\r\n\r\n\r\n        if (intensity > 0){\r\n\r\n           \r\n\r\n            // console.log(textureCords.a.y, textureCords.a.x, rIndx)\r\n           \r\n\r\n    \r\n\r\n            // console.log(model.texture[rIndx])\r\n\r\n        \r\n\r\n            // console.log(rIndx)\r\n\r\n            // drawer.setColor(new Color(model.texture[rIndx]* intensity, model.texture[rIndx + 1]*intensity, model.texture[rIndx + 2] * intensity))\r\n\r\n    \r\n            // drawer.setColor(new Color(intensity*255, intensity*0, intensity*0))\r\n\r\n            drawer.fillTriangle(\r\n                a.multiply(objZoom).add(addedVector).round(),\r\n                b.multiply(objZoom).add(addedVector).round(),\r\n                c.multiply(objZoom).add(addedVector).round(),\r\n                textureCord, \r\n                intensity*0.8\r\n            )\r\n        }\r\n       \r\n    }\r\n    drawer.show()\r\n    alpha += Math.PI / 180\r\n\r\n    if  (alpha > 2 * Math.PI) alpha = 0\r\n}\r\n\r\n\r\n\r\n\r\nfunction rotateY(vec: Vector3D, alpha: number): Vector3D{\r\n    let m = new Matrix3x3([\r\n            [Math.cos(alpha), 0, Math.sin(alpha)],\r\n            [0, 1, 0],\r\n            [-Math.sin(alpha), 0, Math.cos(alpha)]\r\n    ])\r\n\r\n    return m.multiplyVector(vec)\r\n    \r\n}\r\n","module.exports = \"9ada2820eedccf69\";","module.exports = \"7e4ff31e61a39d1a\";"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","URL","parcelRequire","resolve","import","meta","url","toString","register","JSON","parse","$81b7e1828a93a564$export$892596cec99bc70e","constructor","r","g","b","a","this","static","_getRandomInt","max","Math","floor","random","$80f05e7a3dcbb898$export$f6b39f5a8a6533a5","x","y","subtract","v","add","round","multiply","scalar","normalize","sqrt","$80f05e7a3dcbb898$export$fe203bd8c6486855","z","super","crossProduct","dotProduct","$d516eefa5f69822b$var$fpsInterval","$d516eefa5f69822b$var$startTime","$d516eefa5f69822b$var$now","$d516eefa5f69822b$var$then","$d516eefa5f69822b$var$elapsed","$e5d0bc66d4d570f2$export$f0a5d927dd717bca","m","j","multiplyVector","vec","$8add6174fa56b25d$export$a1edc412be3e1841","mesh","textureCords","normals","texture","$4043cec9244d7ff7$export$5a465592bfe74b48","p1","p2","p3","c","$dee476fb77b0925a$export$cebd276add3e2509","obj","_obj","split","_vertices","_normals","_textureCoords","lineItems","line","trim","substring","push","parseFloat","point1Info","point2Info","point3Info","parseInt","console","log","async","$d68a01c54b3229ad$export$139f02209b005611","source","image","assign","Image","src","Promise","addEventListener","context","document","createElement","width","height","getContext","imageSmoothingEnabled","drawImage","getImageData","$d68a01c54b3229ad$var$imageDataFromSource","$6fe321f8d8f01b12$var$canvas","getElementById","$6fe321f8d8f01b12$var$alpha","$6fe321f8d8f01b12$var$drawer","canvas","pixelSize","canvasWidth","canvasHeight","imageData","createImageData","currentColor","pixels","zBuffer","Array","fill","Infinity","cols","buf","ArrayBuffer","buf8","Uint8ClampedArray","data","Uint32Array","Date","now","update","clearZBuffer","setColor","color","int24Color","addPoint","canvasX","canvasY","pixelIndex","canvasStartX","canvasStartY","dx","dy","pixelIndex1","addLine","x0","y0","x1","y1","isInvert","abs","xLength","deltaY","stepY","doubleXLenght","addTriangle","x2","y2","Barycentric","p","ab","ac","pa","v1","v2","v3","u","Barycentric1","dot00","dot01","dot02","dot11","dot12","denom","invDenom","Barycentric2","v0","d00","d01","d11","d20","d21","w","_findMinMax","min","fillTriangleBarycentric","textureTriangle","intensity","minX","maxX","minY","maxY","barycentric","index","pz","uv","interpolation","rIndx","ceil","c1","textureBuffer","fillTriangle","xFrom","xTo","ctgA","ctgB","ctgC","xA","xB","xC","uvX","textureBufferWidth","uvY","textureBufferHeight","textureBufferLength","clear","show","set","putImageData","startDraw","endDraw","setFpsLimit","fps","startAnimation","requestAnimationFrame","bind","setUpdate","endAnimation","$6fe321f8d8f01b12$var$model","$6fe321f8d8f01b12$var$model1","$6fe321f8d8f01b12$var$model2","$6fe321f8d8f01b12$var$model1Data","$6fe321f8d8f01b12$var$model2Data","$6fe321f8d8f01b12$var$addedVector","$6fe321f8d8f01b12$var$WIDTH","$6fe321f8d8f01b12$var$HEIGHT","$6fe321f8d8f01b12$var$minusLightDir","$6fe321f8d8f01b12$var$counter","parsedObj","$parcel$interopDefault","parsedObj2","texture2","then","$6fe321f8d8f01b12$var$update","triangle","textureCord","$6fe321f8d8f01b12$var$rotateY","vec1","vec2","normal","PI","alpha","cos","sin"],"version":3,"file":"index.6307c91c.js.map"}