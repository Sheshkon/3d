{"mappings":"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","sources":["ts/core/color.ts","ts/core/vector.ts","ts/core/drawer.ts","ts/core/matrix.ts","ts/core/model.ts","ts/core/triangle.ts","ts/core/obj.parser.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-30fdaed0e1a30943.js","ts/main.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-366cf04d1040ae5f.js"],"sourcesContent":["export class Color {\r\n\r\n    public r: number;\r\n    public g: number;\r\n    public b: number;\r\n    public a: number;\r\n\r\n    constructor(r: number, g: number, b: number, a: number = 255) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n\r\n    public static getRanomColor(): Color {\r\n        return new Color(this._getRandomInt(255), this._getRandomInt(255), this._getRandomInt(255))\r\n    }\r\n\r\n    private static  _getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * Math.floor(max+1));\r\n    }\r\n\r\n}\r\n\r\n\r\n","export class Vector2D{\r\n    x: number\r\n    y: number\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n\r\n    public subtract(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x - v.x, this.y - v.y)\r\n    }\r\n\r\n    public add(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x + v.x, this.y + v.y)\r\n    }\r\n\r\n    public round(): Vector2D {\r\n        return new Vector2D(Math.round(this.x), Math.round(this.y))\r\n    }\r\n\r\n    public multiply(scalar: number): Vector2D {\r\n        return new Vector2D(this.x * scalar, this.y * scalar)\r\n    }\r\n\r\n    public normalize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class Vector3D extends Vector2D {\r\n    z: number\r\n\r\n    constructor(x: number, y: number, z: number) {\r\n        super(x, y)\r\n        this.z = z\r\n    }\r\n  \r\n\r\n    // right hand coordinate system\r\n    public crossProduct(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\r\n    }\r\n\r\n    public dotProduct(v: Vector3D): number { \r\n        return this.x * v.x + this.y * v.y + this.z * v.z\r\n    }\r\n\r\n    public subtract(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x - v.x, this.y - v.y, this.z - v.z)\r\n    }\r\n\r\n    public add(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x + v.x, this.y + v.y, this.z + v.z)\r\n    }\r\n\r\n    public round(): Vector3D {\r\n        return new Vector3D(Math.round(this.x), Math.round(this.y), Math.round(this.z))\r\n    }\r\n\r\n    public multiply(scalar: number): Vector3D {\r\n        return new Vector3D(this.x * scalar, this.y * scalar, this.z * scalar)\r\n    }\r\n\r\n    public normalize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n            this.z /= length\r\n        }\r\n    }\r\n}\r\n","import { Color } from \"./color\";\r\nimport { Triangle } from \"./triangle\";\r\nimport { Vector3D } from \"./vector\";\r\n\r\nlet  stopAnimation: boolean = false\r\nlet frameCount: number = 0\r\nlet fps: number = 10, fpsInterval: number, startTime: number, now: number, then: number, elapsed: number\r\n\r\n\r\nexport class Drawer {\r\n    \r\n        private canvas: HTMLCanvasElement;\r\n        public width: number\r\n        public height: number\r\n        public canvasWidth: number\r\n        public canvasHeight: number\r\n        public pixelSize: number\r\n        public pixels: Color[][]\r\n        private context: CanvasRenderingContext2D\r\n        private imageData: ImageData\r\n        public currentColor: Color\r\n        public buf: ArrayBuffer\r\n        public buf8: Uint8ClampedArray\r\n        public data: Uint32Array\r\n        public int24Color: number\r\n        public update: () => void\r\n        public zBuffer: number[]\r\n        public textureBuffer: Uint8ClampedArray\r\n    \r\n        constructor(canvas: HTMLCanvasElement, width: number, height: number, pixelSize: number) {\r\n            this.canvas = canvas\r\n            this.width = width * pixelSize\r\n            this.height = height * pixelSize\r\n            this.canvasWidth = width\r\n            this.canvasHeight = height\r\n            this.pixelSize = pixelSize\r\n            this.context = this.canvas.getContext(\"2d\")\r\n            this.imageData = this.context.createImageData(this.width, this.height)\r\n            this.currentColor = new Color(0, 0, 0)\r\n            this.context.canvas.width = this.width\r\n            this.context.canvas.height = this.height\r\n            this.pixels = []\r\n            this.zBuffer = new Array(this.width * this.height).fill(-Infinity)\r\n\r\n            for (let i = 0; i < this.width; i++) {\r\n                let cols = []\r\n                for (let j = 0; j < this.height; j++) {\r\n                    cols.push(new Color(0, 0, 0))\r\n                }\r\n                this.pixels.push(cols)\r\n            }\r\n\r\n            this.buf = new ArrayBuffer(this.width * this.height * 4)\r\n            this.buf8 = new Uint8ClampedArray(this.buf)\r\n            this.data = new Uint32Array(this.buf)\r\n\r\n            fpsInterval = 1000 / fps\r\n            then = Date.now()\r\n            startTime = then\r\n            this.update = () => {}\r\n        \r\n        }\r\n\r\n        public clearZBuffer(): void{\r\n            this.zBuffer = new Array(this.width * this.height).fill(-Infinity)\r\n        }\r\n      \r\n        public setColor(color: Color): void{\r\n           this.currentColor = color\r\n           this.int24Color = (255 << 24) | (color.b << 16) | (color.g << 8) | color.r\r\n        }\r\n\r\n        public addPoint(x: number, y: number): void {\r\n            let canvasX = x;\r\n            let canvasY = this.canvasHeight - y - 1;\r\n            if (this.pixelSize == 1) {\r\n                let pixelIndex = canvasY * this.width + canvasX;\r\n                this.data[pixelIndex] = this.int24Color;\r\n                return;\r\n            }\r\n            \r\n            const canvasStartX = canvasX * this.pixelSize;\r\n            const canvasStartY = canvasY * this.pixelSize;\r\n            for (var dx = 0; dx < this.pixelSize; dx++) {\r\n                for (var dy = 0; dy < this.pixelSize; dy++) {\r\n                    let pixelIndex = (canvasStartY + dy) * this.width + canvasStartX + dx; \r\n                    this.data[pixelIndex] = this.int24Color;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        public addLine(x0: number, y0: number , x1: number, y1: number): void{\r\n            // y = kx + b\r\n            // setpY = k = (y1 - y0) / (x1 - x0)\r\n            // b = y0 - kx0\r\n            // Bresenham's line algorithm\r\n            \r\n            let isInvert = false\r\n        \r\n            if (Math.abs(y1 - y0) > Math.abs(x1 - x0)) {\r\n                [x0, y0] = [y0, x0];\r\n                [x1, y1] = [y1, x1];\r\n                isInvert = true\r\n            }\r\n        \r\n            if (x1 < x0) {\r\n                [x0, x1] = [x1, x0];\r\n                [y0, y1] = [y1, y0];\r\n            }\r\n        \r\n            let xLength = x1 - x0\r\n            let deltaY = 0\r\n            let stepY = 2 * Math.abs((y1 - y0))\r\n            let y = y0\r\n            let dy = y1 > y0 ? 1 : -1\r\n            let doubleXLenght = 2 * xLength\r\n        \r\n            for (let x = x0; x <= x1; x++) {\r\n                this.addPoint(isInvert ? y : x, isInvert ? x : y)\r\n                deltaY += stepY\r\n                if (deltaY > xLength) {\r\n                    y += dy\r\n                    deltaY -= doubleXLenght\r\n                }\r\n        \r\n            }\r\n        }\r\n\r\n\r\n        public addTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): void {\r\n            this.addLine(x0, y0, x1, y1)\r\n            this.addLine(x1, y1, x2, y2)\r\n            this.addLine(x2, y2, x0, y0)\r\n        }\r\n\r\n        public Barycentric(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n            let ab = b.subtract(a)\r\n            let ac = c.subtract(a)\r\n            let pa = a.subtract(p)\r\n        \r\n            let v1 = new Vector3D(ab.x, ac.x, pa.x)\r\n            let v2 = new Vector3D(ab.y, ac.y, pa.y)\r\n            let v3 = v1.crossProduct(v2)\r\n        \r\n            if (v3.z == 0) return null\r\n        \r\n            let u = v3.x / v3.z\r\n            let v = v3.y / v3.z\r\n        \r\n            return new Vector3D(1 - u - v, v, u)\r\n        }\r\n\r\n        public Barycentric1(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n            let ab = b.subtract(a)\r\n            let ac = c.subtract(a)\r\n            let pa = a.subtract(p)\r\n\r\n            const dot00 = ac.dotProduct(ac)\r\n            const dot01 = ac.dotProduct(ab)\r\n            const dot02 = ac.dotProduct(pa)\r\n            const dot11 = ab.dotProduct(ab)\r\n            const dot12 = ab.dotProduct(pa)\r\n\r\n            const denom = dot00 * dot11 - dot01 * dot01\r\n\r\n            if (denom == 0) return null\r\n\r\n            const invDenom = 1 / denom\r\n\r\n            const u = (dot11 * dot02 - dot01 * dot12) * invDenom\r\n            const v = (dot00 * dot12 - dot01 * dot02) * invDenom\r\n\r\n            return new Vector3D(1 - u - v, v, u)\r\n\r\n        }\r\n\r\n        public Barycentric2(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n                let v0 = b.subtract(a)\r\n                let v1 = c.subtract(a)\r\n                let v2 = p.subtract(a)\r\n\r\n                let d00 = v0.dotProduct(v0)\r\n                let d01 = v0.dotProduct(v1)\r\n                let d11 = v1.dotProduct(v1)\r\n                let d20 = v2.dotProduct(v0)\r\n                let d21 = v2.dotProduct(v1)\r\n\r\n                let denom = d00 * d11 - d01 * d01\r\n                \r\n                if (denom == 0) return null\r\n\r\n                let v = (d11 * d20 - d01 * d21) / denom\r\n                let w = (d00 * d21 - d01 * d20) / denom\r\n                let u = 1 - v - w\r\n\r\n                return new Vector3D(u, v, w)\r\n\r\n\r\n            }\r\n\r\n        private _findMinMax(a: number, b: number, c: number): [number ,number]{\r\n            let min = a\r\n            let max = a\r\n\r\n            if (b < min) min = b\r\n            if (c < min) min = c\r\n            if (b > max) max = b\r\n            if (c > max) max = c\r\n\r\n            return [min, max]\r\n        }\r\n\r\n        public fillTriangleBarycentric(a: Vector3D, b:Vector3D, c: Vector3D, textureTriangle: Triangle = null, intensity = 1): void {\r\n            const [minX, maxX] = this._findMinMax(a.x, b.x, c.x)\r\n            const [minY, maxY] = this._findMinMax(a.y, b.y, c.y)\r\n\r\n            for (let y = minY; y <= maxY; y++){\r\n                for (let x = minX; x <= maxX; x++){\r\n                    \r\n                    let barycentric = this.Barycentric(a, b, c, new Vector3D(x, y, 0))\r\n                    let index = y * this.width + x\r\n                    if (barycentric == null){\r\n                        continue\r\n                    }\r\n                    let pz = a.z * barycentric.x + b.z * barycentric.y + c.z * barycentric.z\r\n\r\n                    if (pz <= this.zBuffer[index]){\r\n                        continue\r\n                    }\r\n                    if (barycentric.x > 0 && barycentric.y > 0 && barycentric.z > 0){\r\n                        this.addPoint(x, y)\r\n\r\n                        let uv = this.interpolation(textureTriangle, barycentric)\r\n                        // console.log(textureTriangle)\r\n                        // console.log(uv)\r\n                        // console.log('coords:',  uv.x * 64, uv.y * 64)\r\n                        // console.log(uv.x * 1024, uv.y * 1024)\r\n                        let rIndx = 4 *(Math.ceil(uv.x*1024)  + Math.ceil(uv.y * 1024)*1024)\r\n                        // console.log(rIndx)\r\n\r\n                        // console.log(rIndx)\r\n                        let c = new Color(this.textureBuffer[rIndx]*intensity, this.textureBuffer[rIndx+1]*intensity, this.textureBuffer[rIndx+1]*intensity)\r\n                        // console.log('color', c)\r\n                        this.setColor(c)\r\n                    // }\r\n                    \r\n                    this.addPoint(x, y)\r\n                    this.zBuffer[index] = pz\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public interpolation(textureTriangle: Triangle, barycentric: Vector3D): Vector3D {\r\n\r\n            // console.log(barycentric.x + barycentric.y + barycentric.z)\r\n            let texturePoint = \r\n                textureTriangle.a.multiply(barycentric.x).add(\r\n                    textureTriangle.b.multiply(barycentric.y).add(\r\n                        textureTriangle.c.multiply(barycentric.z)\r\n                )\r\n                )\r\n            return texturePoint\r\n        }\r\n\r\n        public fillTriangle(a: Vector3D, b: Vector3D, c: Vector3D, textureTriangle: Triangle = null, intensity: number = 1): void {\r\n\r\n            let x0 = a.x\r\n            let y0 = a.y\r\n            let x1 = b.x\r\n            let y1 = b.y\r\n            let x2 = c.x\r\n            let y2 = c.y\r\n\r\n            // sort points by y\r\n            // devide triangle on two parts\r\n            // fill first part\r\n            // fill second part\r\n            // user ctg to find x\r\n            \r\n            if (x0 == x1 && x1 == x2) {\r\n                return\r\n            }\r\n\r\n            if (y0 == y1 && y1 == y2) {\r\n                return\r\n            }\r\n\r\n            if (y1 < y0) {\r\n                [x0, x1] = [x1, x0];\r\n                [y0, y1] = [y1, y0];\r\n            }\r\n\r\n            if (y2 < y0) {\r\n                [x0, x2] = [x2, x0];\r\n                [y0, y2] = [y2, y0];\r\n            }\r\n\r\n            if (y2 < y1) {\r\n                [x1, x2] = [x2, x1];\r\n                [y1, y2] = [y2, y1];\r\n            }\r\n\r\n            let ctgA = (x2 - x0) / (y2 - y0);\r\n            let ctgB = y1 != y0 ? (x1 - x0) / (y1 - y0) : 0;\r\n            let ctgC = y2 != y1 ? (x2 - x1) / (y2 - y1) : 0;\r\n\r\n            let xA = x0;\r\n            let xB = x0;\r\n            let xC = x1;\r\n\r\n            let xFrom, xTo;\r\n\r\n            for (let y = y0;; y++) {\r\n                xFrom = Math.round(xA);\r\n                xTo = y < y1 ? Math.round(xB) : Math.round(xC);\r\n                if (xTo < xFrom) {\r\n                    [xFrom, xTo] = [xTo, xFrom];\r\n                }\r\n                for (let x = xFrom; x <= xTo; x++) {\r\n                    let barycentric = this.Barycentric(a, b, c, new Vector3D(x, y, 0))\r\n                    if (barycentric != null){\r\n                        let pz = a.z * barycentric.x + b.z * barycentric.y + c.z * barycentric.z\r\n                        let index = y * this.width + x\r\n\r\n                        // let uv = this.fromBarycentricTo(barycentric, textureTriangle.a.multiply(64), textureTriangle.b.multiply(64), textureTriangle.c.multiply(64))\r\n                               \r\n                        if (pz > this.zBuffer[index]){\r\n                            // if (textureTriangle != null) {\r\n\r\n\r\n                                let uv = this.interpolation(textureTriangle, barycentric)\r\n                                // console.log(textureTriangle)\r\n                                // console.log(uv)\r\n                                // console.log('coords:',  uv.x * 64, uv.y * 64)\r\n                                // console.log(uv.x * 1024, uv.y * 1024)\r\n                                let rIndx = 4 *(Math.ceil(uv.x*1024)  + Math.ceil(uv.y * 1024)*1024)\r\n                                // console.log(rIndx)\r\n\r\n                                // console.log(rIndx)\r\n                                let c = new Color(this.textureBuffer[rIndx]*intensity, this.textureBuffer[rIndx+1]*intensity, this.textureBuffer[rIndx+1]*intensity)\r\n                                // console.log('color', c)\r\n                                this.setColor(c)\r\n                            // }\r\n                            this.addPoint(x, y)\r\n                            this.zBuffer[index] = pz\r\n                        }\r\n                    }\r\n                }\r\n        \r\n                if (y >= y2) {\r\n                    break;\r\n                }\r\n        \r\n                xA += ctgA;\r\n                if (y < y1) {\r\n                    xB += ctgB;\r\n                }\r\n                else {\r\n                    xC += ctgC;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n        public clear(): void {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (let y = 0; y < this.height; y++) {\r\n                    this.data[y * this.width + x] = this.int24Color\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public show(): void {\r\n            this.imageData.data.set(this.buf8)\r\n            this.context.putImageData(this.imageData, 0, 0)\r\n        }\r\n\r\n\r\n        public startDraw(): void {\r\n        }\r\n\r\n\r\n        public endDraw(): void {}\r\n\r\n        public setFpsLimit(fps: number): void {\r\n            fpsInterval = 1000 / fps\r\n        }\r\n\r\n        public startAnimation(): void {\r\n            requestAnimationFrame(this.startAnimation.bind(this))\r\n\r\n            now = Date.now()\r\n            elapsed = now - then\r\n            if(elapsed > fpsInterval){\r\n                then = now - (elapsed % fpsInterval)\r\n                this.update()\r\n            }\r\n        }\r\n\r\n        public setUpdate(update: () => void): void {\r\n            this.update = update\r\n        }\r\n\r\n        public endAnimation(): void {}\r\n\r\n    }\r\n\r\n\r\n","import { Vector3D } from \"./vector\"\r\n\r\nexport class Matrix3x3 {\r\n    m : number[][]\r\n    public constructor(m: number[][]) {\r\n        this.m = []\r\n        for (let i = 0; i < 3; i++) {\r\n            this.m[i] = []\r\n            for (let j = 0; j < 3; j++) {\r\n                this.m[i][j] = m[i][j]\r\n            }\r\n        }\r\n    }\r\n\r\n    public multiplyVector(vec: Vector3D): Vector3D {\r\n        let newVector = new Vector3D(\r\n            this.m[0][0] * vec.x + this.m[0][1] * vec.y + this.m[0][2] * vec.z,\r\n            this.m[1][0] * vec.x + this.m[1][1] * vec.y + this.m[1][2] * vec.z,\r\n            this.m[2][0] * vec.x + this.m[2][1] * vec.y + this.m[2][2] * vec.z\r\n        )\r\n\r\n        return newVector\r\n    }\r\n}","import { Triangle } from \"./triangle\"\r\n\r\nexport class Model {\r\n    public mesh: Triangle[] = []\r\n    public textureCords: Triangle[] = []\r\n    public normals: Triangle[] = []\r\n    public length: number\r\n    public texture: Uint8ClampedArray\r\n\r\n    public constructor(mesh: Triangle[], textureCords: Triangle[], normals: Triangle[], texture: any){\r\n        if (mesh.length != textureCords.length || mesh.length != normals.length)\r\n            throw new Error(\"Mesh, texture cords and normals must have the same length\")\r\n        \r\n        this.length = mesh.length\r\n        this.mesh = mesh\r\n        this.textureCords = textureCords\r\n        this.normals = normals\r\n        this.texture = texture\r\n    }\r\n\r\n}","import { Color } from \"./color\"\r\nimport { Vector3D } from \"./vector\"\r\n\r\n\r\nexport class Triangle {\r\n\r\n    public a: Vector3D\r\n    public b: Vector3D\r\n    public c: Vector3D\r\n   \r\n    constructor(p1: Vector3D, p2: Vector3D, p3: Vector3D) {\r\n        this.a = new Vector3D(p1.x, p1.y, p1.z)\r\n        this.b = new Vector3D(p2.x, p2.y, p2.z)\r\n        this.c = new Vector3D(p3.x, p3.y, p3.z)\r\n    }\r\n\r\n}","import { Model } from \"./model\";\r\nimport { Triangle } from \"./triangle\";\r\nimport { Vector3D } from \"./vector\";\r\n\r\n\r\nexport class ObjParser{\r\n    public static parse(obj: string): {mesh: Triangle[], textureCords: Triangle[], normals: Triangle[]}{\r\n\r\n        let _obj = obj.split(\"\\n\");\r\n        let _vertices = [];\r\n        let _faces = [];\r\n        let _normals = [];\r\n        let _textureCoords = [];\r\n        let mesh = []\r\n        let textureCords = []\r\n        let normals = []\r\n\r\n        let lineItems: string[] = []\r\n\r\n        for(let i = 0; i < _obj.length; i++){\r\n            let line = _obj[i]\r\n\r\n            switch (line[0]) {\r\n                case \"v\":\r\n                    lineItems = line.split(\" \")\r\n                    switch (line[1]){\r\n                        case \" \":\r\n                            _vertices.push(new Vector3D(\r\n                                parseFloat(lineItems[1]),\r\n                                parseFloat(lineItems[2]),\r\n                                parseFloat(lineItems[3])\r\n                                )\r\n                            )   \r\n                        break\r\n\r\n                        case \"t\":\r\n                            _textureCoords.push(new Vector3D(\r\n                                parseFloat(lineItems[2]),\r\n                                parseFloat(lineItems[3]),\r\n                                0.0\r\n                                )\r\n                            )\r\n                        break\r\n\r\n                        case \"n\":\r\n                            _normals.push(new Vector3D(\r\n                                parseFloat(lineItems[2]),\r\n                                parseFloat(lineItems[3]),\r\n                                parseFloat(lineItems[4])\r\n                                )\r\n                            )\r\n                        break\r\n\r\n                    }\r\n                    break\r\n                    \r\n                case \"f\":\r\n                    lineItems = line.split(\" \")\r\n                    let point1Info = lineItems[1].split(\"/\")\r\n                    let point2Info = lineItems[2].split(\"/\")\r\n                    let point3Info = lineItems[3].split(\"/\")\r\n                    mesh.push(new Triangle(\r\n                        _vertices[parseInt(point1Info[0])-1],\r\n                        _vertices[parseInt(point2Info[0])-1],\r\n                        _vertices[parseInt(point3Info[0])-1]\r\n                       \r\n                    ))\r\n\r\n                    textureCords.push(new Triangle(\r\n                        _textureCoords[parseInt(point1Info[1])-1],\r\n                        _textureCoords[parseInt(point2Info[1])-1],\r\n                        _textureCoords[parseInt(point3Info[1])-1]\r\n                    ))\r\n\r\n                    normals.push(new Triangle(\r\n                        _normals[parseInt(point1Info[2])-1],\r\n                        _normals[parseInt(point2Info[2])-1],\r\n                        _normals[parseInt(point3Info[2])-1]\r\n                    ))\r\n            }\r\n        }\r\n\r\n        console.log(_textureCoords)\r\n\r\n\r\n        return {mesh: mesh, textureCords: textureCords, normals: normals}\r\n    }\r\n}","module.exports = \"79e60183eac1363b\";","\r\nimport obj from \"bundle-text:../src/obj/man.obj\";\r\nimport { Color } from \"./core/color\";\r\nimport { Drawer } from \"./core/drawer\";\r\nimport { Matrix3x3 } from \"./core/matrix\";\r\nimport { Model } from \"./core/model\";\r\nimport { ObjParser } from \"./core/obj.parser\";\r\nimport { Triangle } from \"./core/triangle\";\r\nimport { Vector3D } from \"./core/vector\";\r\n\r\nimport textureTxt from \"bundle-text:../src/obj/texture.txt\";\r\n\r\n\r\n\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement\r\nconst WIDTH = 800\r\nconst HEIGHT = 800\r\nconst PIXEL_SIZE = 1\r\nconst IS_READ_FILE = true\r\nconst IS_ANIM = true\r\n\r\nlet alpha = 0\r\nconst  drawer = new Drawer(canvas, WIDTH, HEIGHT, PIXEL_SIZE)\r\nlet model: Model\r\n\r\n\r\nconst dx = WIDTH / 2\r\nconst dy = HEIGHT / 2\r\nconst objZoom = 400\r\nconst addedVector = new Vector3D(dx, dy, 0)\r\nconst minusLightDir = new Vector3D(0, 0, 1)\r\n\r\n\r\n\r\n\r\n\r\nif (IS_READ_FILE) {\r\n    \r\n    let parsedObj = ObjParser.parse(obj);\r\n\r\n    let data: number[] = []\r\n    textureTxt.trim()\r\n    let texture = textureTxt.split(\"\\n\")\r\n\r\n    \r\n\r\n    for (let i = 0; i < texture.length; i++){\r\n        let line = texture[i].trim().split(\" \")\r\n        for (let j = 0; j < line.length; j++){\r\n            data.push(parseInt(line[j]))\r\n        }\r\n    }\r\n\r\n    let textureData = new Uint8ClampedArray(data)\r\n    console.log(textureData)\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n    model = new Model(parsedObj.mesh, parsedObj.textureCords, parsedObj.normals, textureData);\r\n    console.log(model);\r\n    drawer.textureBuffer = model.texture\r\n\r\n    // let imgData = new ImageData(textureData, 64, 64)\r\n    // canvas.width = 64\r\n    // canvas.height = 64\r\n    // let ctx = canvas.getContext('2d')\r\n    update() \r\n    drawModel()\r\n\r\n   \r\n}else{\r\n    drawer.setColor(new Color(30, 30, 30))\r\n    drawer.clear()\r\n    drawer.setColor(new Color(200, 200, 0))\r\n    let t0 =  performance.now()\r\n    for (let i = 0; i < 1000; i++) {\r\n        drawer.fillTriangleBarycentric(new Vector3D(100, 100, 0), new Vector3D(200, 100, 0), new Vector3D(150, 200, 0))\r\n    }\r\n    let t1 =  performance.now()\r\n    console.log(\"Call to fill triangle with Barycentric took \" + (t1 - t0) + \" milliseconds.\")\r\n    drawer.setColor(new Color(200, 0, 0))\r\n    t0 = performance.now()\r\n    for (let i = 0; i < 1000; i++) {\r\n        drawer.fillTriangle(new Vector3D(100, 100, 0), new Vector3D(200, 100, 0), new Vector3D(150, 200, 0))\r\n    }\r\n    t1 = performance.now()\r\n    console.log(\"Call to fill triangle took \" + (t1 - t0) + \" milliseconds.\")\r\n    drawer.show()\r\n}\r\n\r\n\r\nfunction drawModel(){\r\n        // update()\r\n\r\n   \r\n    if (IS_ANIM){\r\n        drawer.setUpdate(update)\r\n        drawer.setFpsLimit(30)\r\n        drawer.startAnimation()\r\n    }\r\n}\r\n\r\n\r\nfunction update(){\r\n    drawer.clearZBuffer()\r\n    drawer.setColor(new Color(30, 30, 30))\r\n    drawer.clear()\r\n    drawer.setColor(new Color(200, 0, 0))\r\n\r\n    \r\n    for (let i = 0; i < model.length; i++) {\r\n        let triangle: Triangle = model.mesh[i]\r\n        let textureCord :Triangle = model.textureCords[i]\r\n        let normals:Triangle = model.normals[i]\r\n   \r\n        let a: Vector3D = rotateY(triangle.a, alpha)\r\n        let b: Vector3D = rotateY(triangle.b, alpha)\r\n        let c: Vector3D = rotateY(triangle.c, alpha)\r\n\r\n        let vec1 = b.subtract(a)\r\n        let vec2 = c.subtract(a)\r\n        let normal = vec1.crossProduct(vec2)\r\n        normal.normalize()\r\n        \r\n       \r\n        let intensity = minusLightDir.dotProduct(normal)\r\n\r\n\r\n        if (intensity > 0){\r\n\r\n           \r\n\r\n            // console.log(textureCords.a.y, textureCords.a.x, rIndx)\r\n           \r\n\r\n    \r\n\r\n            // console.log(model.texture[rIndx])\r\n\r\n        \r\n\r\n            // console.log(rIndx)\r\n\r\n            // drawer.setColor(new Color(model.texture[rIndx]* intensity, model.texture[rIndx + 1]*intensity, model.texture[rIndx + 2] * intensity))\r\n\r\n    \r\n            // drawer.setColor(new Color(intensity*255, intensity*0, intensity*0))\r\n\r\n            drawer.fillTriangle(\r\n                a.multiply(objZoom).add(addedVector).round(),\r\n                b.multiply(objZoom).add(addedVector).round(),\r\n                c.multiply(objZoom).add(addedVector).round(),\r\n                textureCord, \r\n                intensity\r\n            )\r\n        }\r\n       \r\n    }\r\n    drawer.show()\r\n    alpha += Math.PI / 180\r\n\r\n    if  (alpha > 2 * Math.PI) alpha = 0\r\n}\r\n\r\n\r\n\r\n\r\nfunction rotateY(vec: Vector3D, alpha: number): Vector3D{\r\n    let m = new Matrix3x3([\r\n            [Math.cos(alpha), 0, Math.sin(alpha)],\r\n            [0, 1, 0],\r\n            [-Math.sin(alpha), 0, Math.cos(alpha)]\r\n    ])\r\n\r\n    return m.multiplyVector(vec)\r\n    \r\n}\r\n","module.exports = \"7e4ff31e61a39d1a\";"],"names":["$81b7e1828a93a564$export$892596cec99bc70e","constructor","r","g","b","a","this","static","_getRandomInt","max","Math","floor","random","$80f05e7a3dcbb898$export$f6b39f5a8a6533a5","x","y","subtract","v","add","round","multiply","scalar","normalize","length","sqrt","$80f05e7a3dcbb898$export$fe203bd8c6486855","z","super","crossProduct","dotProduct","$d516eefa5f69822b$var$fpsInterval","$d516eefa5f69822b$var$startTime","$d516eefa5f69822b$var$now","$d516eefa5f69822b$var$then","$d516eefa5f69822b$var$elapsed","$e5d0bc66d4d570f2$export$f0a5d927dd717bca","m","i","j","multiplyVector","vec","$8add6174fa56b25d$export$a1edc412be3e1841","mesh","textureCords","normals","texture","Error","$4043cec9244d7ff7$export$5a465592bfe74b48","p1","p2","p3","c","$dee476fb77b0925a$export$cebd276add3e2509","obj","_obj","split","_vertices","_normals","_textureCoords","lineItems","line","push","parseFloat","point1Info","point2Info","point3Info","parseInt","console","log","$66ba4900fa2e76b0$exports","$6fe321f8d8f01b12$var$canvas","document","getElementById","$6fe321f8d8f01b12$var$alpha","$6fe321f8d8f01b12$var$drawer","canvas","width","height","pixelSize","canvasWidth","canvasHeight","context","getContext","imageData","createImageData","currentColor","pixels","zBuffer","Array","fill","Infinity","cols","buf","ArrayBuffer","buf8","Uint8ClampedArray","data","Uint32Array","Date","now","update","clearZBuffer","setColor","color","int24Color","addPoint","canvasX","canvasY","pixelIndex","canvasStartX","canvasStartY","dx","dy","pixelIndex1","addLine","x0","y0","x1","y1","isInvert","abs","xLength","deltaY","stepY","doubleXLenght","addTriangle","x2","y2","Barycentric","p","ab","ac","pa","v1","v2","v3","u","Barycentric1","dot00","dot01","dot02","dot11","dot12","denom","invDenom","Barycentric2","v0","d00","d01","d11","d20","d21","w","_findMinMax","min","fillTriangleBarycentric","textureTriangle","intensity","minX","maxX","minY","maxY","barycentric","index","pz","uv","interpolation","rIndx","ceil","c1","textureBuffer","fillTriangle","xFrom","xTo","ctgA","ctgB","ctgC","xA","xB","xC","clear","show","set","putImageData","startDraw","endDraw","setFpsLimit","fps","startAnimation","requestAnimationFrame","bind","setUpdate","endAnimation","$6fe321f8d8f01b12$var$model","$6fe321f8d8f01b12$var$addedVector","$6fe321f8d8f01b12$var$WIDTH","$6fe321f8d8f01b12$var$HEIGHT","$6fe321f8d8f01b12$var$minusLightDir","parsedObj","parse","$parcel$interopDefault","trim","textureData","$6fe321f8d8f01b12$var$update","triangle","textureCord","$6fe321f8d8f01b12$var$rotateY","vec1","vec2","normal","PI","alpha","cos","sin"],"version":3,"file":"index.0b66fc4d.js.map"}