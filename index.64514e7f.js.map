{"mappings":"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","sources":["ts/obj.parser.ts","ts/cube.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-8a92259c7b95af5c.js"],"sourcesContent":["export class ObjParser{\r\n    public static parse(obj: string): any{\r\n\r\n        let _obj = obj.split(\"\\n\");\r\n\r\n        let _vertices = [];\r\n        let _faces = [];\r\n\r\n        for(let i = 0; i < _obj.length; i++){\r\n            let line = _obj[i].split(\" \");\r\n\r\n            if(line[0] == \"v\"){\r\n                _vertices.push([parseFloat(line[1]), parseFloat(line[2]), parseFloat(line[3])]);\r\n            }\r\n\r\n            if(line[0] == \"f\"){\r\n                _faces.push([parseInt(line[1])-1, parseInt(line[2])-1, parseInt(line[3])-1]);\r\n            }\r\n        }\r\n\r\n        let _model = {\r\n            vertices: _vertices,\r\n            faces: _faces\r\n        }\r\n\r\n\r\n        return _model;\r\n    }\r\n}","import obj from \"bundle-text:../src/obj/test.obj\";\r\nimport { ObjParser } from \"./obj.parser\";\r\n\r\nconst canvas = <HTMLCanvasElement> document.getElementById('canvas')\r\nconst canvasRec = canvas.getBoundingClientRect()\r\n\r\n\r\nclass HSL{\r\n    public h: number\r\n    public s: number\r\n    public l: number\r\n\r\n    public constructor(h: number, s: number, l: number) {\r\n        this.h = h\r\n        this.s = s\r\n        this.l = l\r\n    }\r\n\r\n    public toString() {\r\n        return `hsl(${this.h}, ${this.s}%, ${this.l}%)`\r\n    }\r\n\r\n}\r\n\r\nclass COLORS {\r\n    static red =  new HSL(0, 100, 50)\r\n    static green = new HSL(120, 100, 50)\r\n    static blue = new HSL(240, 100, 50)\r\n    static yellow = new HSL(60, 100, 50)\r\n    static orange = new HSL(30, 100, 50)\r\n    static purple = new HSL(300, 100, 50)\r\n    static white = new HSL(0, 0, 100)\r\n}\r\n\r\nclass Vector3D {\r\n\r\n    x: number\r\n    y: number\r\n    z: number\r\n\r\n    constructor(x: number, y: number, z:number) {\r\n        this.x = x\r\n        this.y = y\r\n        this.z = z\r\n    }\r\n\r\n    public crossProduct(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\r\n    }\r\n\r\n    public dotProduct(v: Vector3D): number { \r\n        return this.x * v.x + this.y * v.y + this.z * v.z\r\n    }\r\n\r\n    public subtract(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x - v.x, this.y - v.y, this.z - v.z)\r\n    }\r\n\r\n    public normolize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n            this.z /= length\r\n        }\r\n    }\r\n}\r\n\r\nclass Triangle {\r\n\r\n    public a: Vector3D\r\n    public b: Vector3D\r\n    public c: Vector3D\r\n\r\n    public color: HSL\r\n\r\n    public constructor(p1: Vector3D, p2: Vector3D, p3: Vector3D, color: HSL = COLORS.red) {\r\n        this.a = new Vector3D(p1.x, p1.y, p1.z)\r\n        this.b = new Vector3D(p2.x, p2.y, p2.z)\r\n        this.c = new Vector3D(p3.x, p3.y, p3.z)\r\n        this.color = color\r\n    }\r\n\r\n    public changeLightness() {\r\n        // this.color.s = (this.a.z + this.b.z + this.c.z)/ 3 * 100\r\n        // this.color.h = this.a.z * 60\r\n        // this.color.l = this.a.z * 60\r\n    }\r\n}\r\n\r\n\r\nclass Mesh{\r\n    public triangles: Triangle[]\r\n\r\n    public constructor(obj: string | null) {\r\n        if (obj != null) {\r\n            this._createMesh(obj)\r\n        }\r\n\r\n    }\r\n\r\n    private _createMesh(obj: string) {\r\n        this.triangles = []\r\n        let _obj = ObjParser.parse(obj)\r\n\r\n        for (let i = 0; i < _obj.faces.length; i++) {\r\n            let face = _obj.faces[i]\r\n\r\n            let p1 = _obj.vertices[face[0]]\r\n            let p2 = _obj.vertices[face[1]]\r\n            let p3 = _obj.vertices[face[2]]\r\n\r\n            // let color = COLORS.white\r\n            let triangle = new Triangle(\r\n                new Vector3D(p1[0], p1[1], p1[2]),\r\n                new Vector3D(p2[0], p2[1], p2[2]),\r\n                new Vector3D(p3[0], p3[1], p3[2])\r\n                )\r\n\r\n            this.triangles.push(triangle)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Matrix4x4 {\r\n    m : number[][]\r\n    public constructor(m: number[][]) {\r\n        this.m = []\r\n        for (let i = 0; i < 4; i++) {\r\n            this.m[i] = []\r\n            for (let j = 0; j < 4; j++) {\r\n                this.m[i][j] = m[i][j]\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Camera {\r\n    public position: Vector3D\r\n    public near: number\r\n    public far: number\r\n    public fov: number\r\n    public aspect: number\r\n    public fovRad: number\r\n\r\n    public constructor(position: Vector3D, near: number, far: number, fov: number, aspect: number) {\r\n        this.position = position\r\n        this.near = near\r\n        this.far = far\r\n        this.fov = fov\r\n        this.aspect = aspect\r\n        this.fovRad = 1.0 / Math.tan(fov * 0.5 / 180 * Math.PI)\r\n    }\r\n}\r\n\r\nclass Object3D {\r\n    public position: Vector3D\r\n    public mesh: Mesh\r\n\r\n    public constructor(position: Vector3D, obj: string | null) {\r\n        this.position = position\r\n        this.mesh = new Mesh(obj)\r\n    }\r\n}\r\n\r\n\r\nclass Cube extends Object3D {\r\n    public size: number\r\n \r\n    public constructor(position: Vector3D) {\r\n        super(position, null);\r\n        this.position = position\r\n        this.mesh.triangles = this._createMesh()\r\n    }\r\n\r\n    private _createMesh() {\r\n        // console.log(COLORS.blue)\r\n        return [\r\n            new Triangle(new Vector3D(0.0, 0.0, 0.0), new Vector3D(0.0, 1.0, 0.0), new Vector3D(1.0, 1.0, 0.0), COLORS.blue),\r\n            new Triangle(new Vector3D(0.0, 0.0, 0.0), new Vector3D(1.0, 1.0, 0.0), new Vector3D(1.0, 0.0, 0.0), COLORS.blue),\r\n            // Right\r\n            new Triangle(new Vector3D(1.0, 0.0, 0.0), new Vector3D(1.0, 1.0, 0.0), new Vector3D(1.0, 1.0, 1.0), COLORS.red),\r\n            new Triangle(new Vector3D(1.0, 0.0, 0.0), new Vector3D(1.0, 1.0, 1.0), new Vector3D(1.0, 0.0, 1.0), COLORS.red),\r\n            // Back\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(1.0, 1.0, 1.0), new Vector3D(0.0, 1.0, 1.0), COLORS.green),\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(0.0, 1.0, 1.0), new Vector3D(0.0, 0.0, 1.0), COLORS.green),\r\n            // Left\r\n            new Triangle(new Vector3D(0.0, 0.0, 1.0), new Vector3D(0.0, 1.0, 1.0), new Vector3D(0.0, 1.0, 0.0), COLORS.orange),\r\n            new Triangle(new Vector3D(0.0, 0.0, 1.0), new Vector3D(0.0, 1.0, 0.0), new Vector3D(0.0, 0.0, 0.0), COLORS.orange),\r\n            // Top\r\n            new Triangle(new Vector3D(0.0, 1.0, 0.0), new Vector3D(0.0, 1.0, 1.0), new Vector3D(1.0, 1.0, 1.0), COLORS.purple),\r\n            new Triangle(new Vector3D(0.0, 1.0, 0.0), new Vector3D(1.0, 1.0, 1.0), new Vector3D(1.0, 1.0, 0.0), COLORS.purple),\r\n            // Bottom\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(0.0, 0.0, 1.0), new Vector3D(0.0, 0.0, 0.0), COLORS.yellow),\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(0.0, 0.0, 0.0), new Vector3D(1.0, 0.0, 0.0), COLORS.yellow)\r\n        ]\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Render {\r\n\r\n    public canvas: HTMLCanvasElement\r\n    public ctx: CanvasRenderingContext2D\r\n    public canvasRec: DOMRect\r\n    public camera: Camera\r\n    public aspectRation: number\r\n    public projectionMatrix: Matrix4x4\r\n\r\n    constructor(canvas: HTMLCanvasElement, camera: Camera) {\r\n        this.canvas = canvas\r\n        this.ctx = canvas.getContext('2d')!\r\n        this.canvasRec = canvas.getBoundingClientRect()\r\n            // console.log('this.canvasRec', this.canvasRec)\r\n        this.camera = camera\r\n        this.aspectRation = this.camera.aspect\r\n        this.projectionMatrix = new Matrix4x4([\r\n            [this.camera.fovRad * this.aspectRation, 0.0, 0.0, 0.0],\r\n            [0.0, this.camera.fovRad, 0, 0],\r\n            [0.0, 0.0, this.camera.far / (this.camera.far - this.camera.near), 1.0],\r\n            [0.0, 0.0, (-this.camera.far * this.camera.near) / (this.camera.far - this.camera.near), 0.0]\r\n        ])\r\n\r\n    }\r\n\r\n    public multiplayVectorAndMatrix(i: Vector3D, m: Matrix4x4) {\r\n        let newVector = new Vector3D(\r\n            i.x * m.m[0][0] + i.y * m.m[1][0] + i.z * m.m[2][0] + m.m[3][0],\r\n            i.x * m.m[0][1] + i.y * m.m[1][1] + i.z * m.m[2][1] + m.m[3][1],\r\n            i.x * m.m[0][2] + i.y * m.m[1][2] + i.z * m.m[2][2] + m.m[3][2]\r\n        )\r\n\r\n        let w = i.x * m.m[0][3] + i.y * m.m[1][3] + i.z * m.m[2][3] + m.m[3][3]\r\n\r\n        if (Math.abs(w) !== 0.0) {\r\n            newVector.x /= w\r\n            newVector.y /= w\r\n            newVector.z /= w\r\n        }\r\n        // console.log('newVector', newVector)\r\n\r\n        return newVector\r\n    }\r\n\r\n    public getRotateXMatrix(angle: number) {\r\n        let cos = Math.cos(angle*0.5)\r\n        let sin = Math.sin(angle*0.5)\r\n\r\n        return new Matrix4x4([\r\n            [1, 0, 0, 0],\r\n            [0, cos, sin, 0],\r\n            [0, -sin, cos, 0],\r\n            [0, 0, 0, 1]\r\n        ])\r\n    }\r\n\r\n    public getRotateYMatrix(angle: number) {\r\n        let cos = Math.cos(angle*0.5)\r\n        let sin = Math.sin(angle*0.5)\r\n\r\n        return new Matrix4x4([\r\n            [cos, 0, -sin, 0],\r\n            [0, 1, 0, 0],\r\n            [sin, 0, cos, 0],\r\n            [0, 0, 0, 1]\r\n        ])\r\n    }\r\n\r\n    public getRotateZMatrix(angle: number) {\r\n        let cos = Math.cos(angle)\r\n        let sin = Math.sin(angle)\r\n\r\n        return new Matrix4x4([\r\n            [cos, sin, 0, 0],\r\n            [-sin, cos, 0, 0],\r\n            [0, 0, 1, 0],\r\n            [0, 0, 0, 1]\r\n        ])\r\n    }\r\n\r\n    public drawTriangle(triangle: Triangle) {\r\n\r\n        // console.log('triangle', triangle)\r\n        this.ctx.beginPath()\r\n        this.ctx.moveTo(triangle.a.x, triangle.a.y)\r\n        this.ctx.lineTo(triangle.b.x, triangle.b.y)\r\n        this.ctx.lineTo(triangle.c.x, triangle.c.y)\r\n        this.ctx.closePath()\r\n        this.ctx.strokeStyle = COLORS.white.toString()\r\n        this.ctx.stroke()\r\n        triangle.changeLightness()\r\n        // console.log(triangle.color)\r\n        // console.log(triangle.a.y - triangle.b.y)\r\n        // this.ctx.fillStyle = triangle.color.toString()\r\n        // console.log('triangle.a.z', triangle.a.z)\r\n        // console.log('triangle.color', triangle.color)\r\n        // this.ctx.fill()\r\n    }\r\n\r\n    public rotateTriangle(triangle: Triangle, rotateMatrix: Matrix4x4) {\r\n        return new Triangle(\r\n            this.multiplayVectorAndMatrix(triangle.a, rotateMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.b, rotateMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.c, rotateMatrix),\r\n            triangle.color\r\n        )\r\n    }\r\n\r\n    public rotateXTriangle(triangle: Triangle, angle: number) {\r\n        return this.rotateTriangle(triangle, this.getRotateXMatrix(0*angle))\r\n    }\r\n\r\n    public rotateYTriangle(triangle: Triangle, angle: number) {\r\n        return this.rotateTriangle(triangle, this.getRotateYMatrix(angle))\r\n    }\r\n\r\n    public rotateZTriangle(triangle: Triangle, angle: number) {\r\n        return this.rotateTriangle(triangle, this.getRotateZMatrix(angle))\r\n    }\r\n\r\n    public projectTriangle(triangle: Triangle) {\r\n        return new Triangle(\r\n            this.multiplayVectorAndMatrix(triangle.a, this.projectionMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.b, this.projectionMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.c, this.projectionMatrix),\r\n            triangle.color\r\n        )\r\n    }\r\n\r\n\r\n    private drawMesh(obj: Object3D, angle: number = 0.1) {\r\n        this.ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n        this.ctx.fillStyle = 'black'\r\n        this.ctx.fillRect(0, 0, canvas.width, canvas.height )\r\n        angle += 0.01\r\n        angle > 360 ? angle = 0 : angle\r\n\r\n\r\n\r\n        for (let triangle of obj.mesh.triangles) {\r\n        \r\n            triangle = this.rotateYTriangle(triangle, angle)\r\n            // console.log('triangle', triangle)\r\n            triangle = this.rotateZTriangle(triangle, angle)\r\n            // console.log('rotateZTriangle', triangle)\r\n            triangle = this.rotateXTriangle(triangle, angle)\r\n\r\n            triangle.a.z += 8\r\n            triangle.b.z += 8\r\n            triangle.c.z += 8\r\n\r\n            let normal = new Vector3D(0, 0, 0)\r\n\r\n            let line1 = triangle.b.subtract(triangle.a)\r\n            let line2 = triangle.c.subtract(triangle.a)\r\n\r\n            normal = line1.crossProduct(line2)\r\n            normal.normolize()\r\n\r\n            if (normal.dotProduct(triangle.a.subtract(camera.position)) <= 0.0) {\r\n               \r\n                triangle = this.projectTriangle(triangle)\r\n                // console.log('mesh', triangle)\r\n                let scale =  300\r\n                \r\n                triangle.a.x += 1\r\n                triangle.a.y += 1\r\n\r\n                triangle.b.x += 1\r\n                triangle.b.y += 1\r\n\r\n                triangle.c.x += 1\r\n                triangle.c.y += 1\r\n\r\n\r\n                triangle.a.x *= scale\r\n                triangle.a.y *= scale\r\n\r\n                triangle.b.x *= scale  \r\n                triangle.b.y *= scale\r\n                \r\n                triangle.c.x *= scale\r\n                triangle.c.y *= scale\r\n\r\n\r\n                this.drawTriangle(triangle)\r\n                \r\n            }    \r\n        }\r\n        window.requestAnimationFrame(this.drawMesh.bind(this, obj, angle));\r\n    }\r\n\r\n    public drawObj(obj: Object3D) {\r\n        this.drawMesh(obj)\r\n    }\r\n}\r\n\r\n\r\nlet camera = new Camera(new Vector3D(0, 0, 0), 0.1, 1000.0, 90.0, canvasRec.height / canvasRec.width)\r\nlet render = new Render(canvas, camera)\r\n\r\nconst cube = new Cube(new Vector3D(0, 0, 0))\r\nconst teaCup = new Object3D(new Vector3D(0, 0, 0), obj)\r\n\r\n\r\n// render.drawObj(cube)\r\nrender.drawObj(teaCup)\r\n\r\n\r\n","module.exports = \"b69b6c1c66491f3b\";"],"names":["$6c38d08c7a488a1a$export$cebd276add3e2509","static","obj","_obj","split","_vertices","_faces","i","length","line","push","parseFloat","parseInt","vertices","faces","$5026d5faf49b4123$var$canvas","document","getElementById","$5026d5faf49b4123$var$canvasRec","getBoundingClientRect","$5026d5faf49b4123$var$HSL","constructor","h","s","l","this","toString","$5026d5faf49b4123$var$COLORS","$5026d5faf49b4123$var$Vector3D","x","y","z","crossProduct","v","dotProduct","subtract","normolize","Math","sqrt","$5026d5faf49b4123$var$Triangle","p1","p2","p3","color","red","a","b","c","changeLightness","$5026d5faf49b4123$var$Mesh","_createMesh","triangles","parse","face","triangle","$5026d5faf49b4123$var$Matrix4x4","m","j","$5026d5faf49b4123$var$Object3D","position","mesh","$5026d5faf49b4123$var$camera","near","far","fov","aspect","fovRad","tan","PI","height","width","$5026d5faf49b4123$var$render","canvas","camera","ctx","getContext","canvasRec","aspectRation","projectionMatrix","multiplayVectorAndMatrix","newVector","w","abs","getRotateXMatrix","angle","cos","sin","getRotateYMatrix","getRotateZMatrix","drawTriangle","beginPath","moveTo","lineTo","closePath","strokeStyle","white","stroke","rotateTriangle","rotateMatrix","rotateXTriangle","rotateYTriangle","rotateZTriangle","projectTriangle","drawMesh","clearRect","fillStyle","fillRect","normal","line1","line2","scale","window","requestAnimationFrame","bind","drawObj","super","blue","green","orange","purple","yellow","$5026d5faf49b4123$var$teaCup","$parcel$interopDefault"],"version":3,"file":"index.64514e7f.js.map"}