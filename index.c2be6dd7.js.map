{"mappings":"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","sources":["js/cube.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-2e7ded23534ae58f.js"],"sourcesContent":["import data from \"bundle-text:../man.obj\";\r\n\r\nconsole.log(data);\r\n\r\nconst canvas = <HTMLCanvasElement> document.getElementById('canvas')\r\nconst ctx = canvas.getContext('d2')\r\nconst canvasRec = canvas.getBoundingClientRect()\r\n\r\n\r\nclass HSL{\r\n    public h: number\r\n    public s: number\r\n    public l: number\r\n\r\n    public constructor(h: number, s: number, l: number) {\r\n        this.h = h\r\n        this.s = s\r\n        this.l = l\r\n    }\r\n\r\n    public toString() {\r\n        return `hsl(${this.h}, ${this.s}%, ${this.l}%)`\r\n    }\r\n\r\n}\r\n\r\nclass COLORS {\r\n    static red =  new HSL(0, 100, 50)\r\n    static green = new HSL(120, 100, 50)\r\n    static blue = new HSL(240, 100, 50)\r\n    static yellow = new HSL(60, 100, 50)\r\n    static orange = new HSL(30, 100, 50)\r\n    static purple = new HSL(300, 100, 50)\r\n}\r\n\r\nclass Vector3D {\r\n\r\n    x: number\r\n    y: number\r\n    z: number\r\n\r\n    constructor(x: number, y: number, z:number) {\r\n        this.x = x\r\n        this.y = y\r\n        this.z = z\r\n    }\r\n\r\n    public crossProduct(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\r\n    }\r\n\r\n    public dotProduct(v: Vector3D): number { \r\n        return this.x * v.x + this.y * v.y + this.z * v.z\r\n    }\r\n\r\n    public subtract(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x - v.x, this.y - v.y, this.z - v.z)\r\n    }\r\n\r\n    public normolize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n            this.z /= length\r\n        }\r\n    }\r\n}\r\n\r\nclass Triangle {\r\n\r\n    public a: Vector3D\r\n    public b: Vector3D\r\n    public c: Vector3D\r\n\r\n    public color: HSL\r\n\r\n    public constructor(p1: Vector3D, p2: Vector3D, p3: Vector3D, color: HSL) {\r\n        this.a = new Vector3D(p1.x, p1.y, p1.z)\r\n        this.b = new Vector3D(p2.x, p2.y, p2.z)\r\n        this.c = new Vector3D(p3.x, p3.y, p3.z)\r\n        this.color = color\r\n    }\r\n\r\n    public changeLightness() {\r\n        // this.color.s = (this.a.z + this.b.z + this.c.z)/ 3 * 100\r\n        // this.color.h = this.a.z * 60\r\n        // this.color.l = this.a.z * 60\r\n    }\r\n}\r\n\r\nclass Matrix4x4 {\r\n    m : number[][]\r\n    public constructor(m: number[][]) {\r\n        this.m = []\r\n        for (let i = 0; i < 4; i++) {\r\n            this.m[i] = []\r\n            for (let j = 0; j < 4; j++) {\r\n                this.m[i][j] = m[i][j]\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Camera {\r\n    public position: Vector3D\r\n    public near: number\r\n    public far: number\r\n    public fov: number\r\n    public aspect: number\r\n    public fovRad: number\r\n\r\n    public constructor(position: Vector3D, near: number, far: number, fov: number, aspect: number) {\r\n        this.position = position\r\n        this.near = near\r\n        this.far = far\r\n        this.fov = fov\r\n        this.aspect = aspect\r\n        this.fovRad = 1.0 / Math.tan(fov * 0.5 / 180 * Math.PI)\r\n    }\r\n}\r\n\r\n\r\nclass Cube {\r\n\r\n    public position: Vector3D\r\n    public size: number\r\n    public mesh: Triangle[]\r\n\r\n\r\n    public constructor(position: Vector3D, size: number) {\r\n        this.position = position\r\n        this.size = size\r\n        this.mesh = this.createMesh()\r\n    }\r\n\r\n    private createMesh() {\r\n        // console.log(COLORS.blue)\r\n        return [\r\n            new Triangle(new Vector3D(0.0, 0.0, 0.0), new Vector3D(0.0, 1.0, 0.0), new Vector3D(1.0, 1.0, 0.0), COLORS.blue),\r\n            new Triangle(new Vector3D(0.0, 0.0, 0.0), new Vector3D(1.0, 1.0, 0.0), new Vector3D(1.0, 0.0, 0.0), COLORS.blue),\r\n            // Right\r\n            new Triangle(new Vector3D(1.0, 0.0, 0.0), new Vector3D(1.0, 1.0, 0.0), new Vector3D(1.0, 1.0, 1.0), COLORS.red),\r\n            new Triangle(new Vector3D(1.0, 0.0, 0.0), new Vector3D(1.0, 1.0, 1.0), new Vector3D(1.0, 0.0, 1.0), COLORS.red),\r\n            // Back\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(1.0, 1.0, 1.0), new Vector3D(0.0, 1.0, 1.0), COLORS.green),\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(0.0, 1.0, 1.0), new Vector3D(0.0, 0.0, 1.0), COLORS.green),\r\n            // Left\r\n            new Triangle(new Vector3D(0.0, 0.0, 1.0), new Vector3D(0.0, 1.0, 1.0), new Vector3D(0.0, 1.0, 0.0), COLORS.orange),\r\n            new Triangle(new Vector3D(0.0, 0.0, 1.0), new Vector3D(0.0, 1.0, 0.0), new Vector3D(0.0, 0.0, 0.0), COLORS.orange),\r\n            // Top\r\n            new Triangle(new Vector3D(0.0, 1.0, 0.0), new Vector3D(0.0, 1.0, 1.0), new Vector3D(1.0, 1.0, 1.0), COLORS.purple),\r\n            new Triangle(new Vector3D(0.0, 1.0, 0.0), new Vector3D(1.0, 1.0, 1.0), new Vector3D(1.0, 1.0, 0.0), COLORS.purple),\r\n            // Bottom\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(0.0, 0.0, 1.0), new Vector3D(0.0, 0.0, 0.0), COLORS.yellow),\r\n            new Triangle(new Vector3D(1.0, 0.0, 1.0), new Vector3D(0.0, 0.0, 0.0), new Vector3D(1.0, 0.0, 0.0), COLORS.yellow)\r\n        ]\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Render {\r\n\r\n    public canvas: HTMLCanvasElement\r\n    public ctx: CanvasRenderingContext2D\r\n    public canvasRec: DOMRect\r\n    public camera: Camera\r\n    public aspectRation: number\r\n    public projectionMatrix: Matrix4x4\r\n\r\n    constructor(canvas: HTMLCanvasElement, camera: Camera) {\r\n        this.canvas = canvas\r\n        this.ctx = canvas.getContext('2d')!\r\n        this.canvasRec = canvas.getBoundingClientRect()\r\n            // console.log('this.canvasRec', this.canvasRec)\r\n        this.camera = camera\r\n        this.aspectRation = this.camera.aspect\r\n        this.projectionMatrix = new Matrix4x4([\r\n            [this.camera.fovRad * this.aspectRation, 0.0, 0.0, 0.0],\r\n            [0.0, this.camera.fovRad, 0, 0],\r\n            [0.0, 0.0, this.camera.far / (this.camera.far - this.camera.near), 1.0],\r\n            [0.0, 0.0, (-this.camera.far * this.camera.near) / (this.camera.far - this.camera.near), 0.0]\r\n        ])\r\n\r\n    }\r\n\r\n    public multiplayVectorAndMatrix(i: Vector3D, m: Matrix4x4) {\r\n        let newVector = new Vector3D(\r\n            i.x * m.m[0][0] + i.y * m.m[1][0] + i.z * m.m[2][0] + m.m[3][0],\r\n            i.x * m.m[0][1] + i.y * m.m[1][1] + i.z * m.m[2][1] + m.m[3][1],\r\n            i.x * m.m[0][2] + i.y * m.m[1][2] + i.z * m.m[2][2] + m.m[3][2]\r\n        )\r\n\r\n        let w = i.x * m.m[0][3] + i.y * m.m[1][3] + i.z * m.m[2][3] + m.m[3][3]\r\n\r\n        if (Math.abs(w) !== 0.0) {\r\n            newVector.x /= w\r\n            newVector.y /= w\r\n            newVector.z /= w\r\n        }\r\n        // console.log('newVector', newVector)\r\n\r\n        return newVector\r\n    }\r\n\r\n    public getRotateXMatrix(angle: number) {\r\n        let cos = Math.cos(angle*0.5)\r\n        let sin = Math.sin(angle*0.5)\r\n\r\n        return new Matrix4x4([\r\n            [1, 0, 0, 0],\r\n            [0, cos, sin, 0],\r\n            [0, -sin, cos, 0],\r\n            [0, 0, 0, 1]\r\n        ])\r\n    }\r\n\r\n    public getRotateYMatrix(angle: number) {\r\n        let cos = Math.cos(angle*0.5)\r\n        let sin = Math.sin(angle*0.5)\r\n\r\n        return new Matrix4x4([\r\n            [cos, 0, -sin, 0],\r\n            [0, 1, 0, 0],\r\n            [sin, 0, cos, 0],\r\n            [0, 0, 0, 1]\r\n        ])\r\n    }\r\n\r\n    public getRotateZMatrix(angle: number) {\r\n        let cos = Math.cos(angle)\r\n        let sin = Math.sin(angle)\r\n\r\n        return new Matrix4x4([\r\n            [cos, sin, 0, 0],\r\n            [-sin, cos, 0, 0],\r\n            [0, 0, 1, 0],\r\n            [0, 0, 0, 1]\r\n        ])\r\n    }\r\n\r\n    public drawTriangle(triangle: Triangle) {\r\n\r\n        // console.log('triangle', triangle)\r\n        this.ctx.beginPath()\r\n        this.ctx.moveTo(triangle.a.x, triangle.a.y)\r\n        this.ctx.lineTo(triangle.b.x, triangle.b.y)\r\n        this.ctx.lineTo(triangle.c.x, triangle.c.y)\r\n        this.ctx.closePath()\r\n        this.ctx.strokeStyle = triangle.color.toString()\r\n        // this.ctx.stroke()\r\n        triangle.changeLightness()\r\n        // console.log(triangle.color)\r\n        // console.log(triangle.a.y - triangle.b.y)\r\n        this.ctx.fillStyle = triangle.color.toString()\r\n        // console.log('triangle.a.z', triangle.a.z)\r\n        // console.log('triangle.color', triangle.color)\r\n        this.ctx.fill()\r\n    }\r\n\r\n    public rotateTriangle(triangle: Triangle, rotateMatrix: Matrix4x4) {\r\n        return new Triangle(\r\n            this.multiplayVectorAndMatrix(triangle.a, rotateMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.b, rotateMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.c, rotateMatrix),\r\n            triangle.color\r\n        )\r\n    }\r\n\r\n    public rotateXTriangle(triangle: Triangle, angle: number) {\r\n        return this.rotateTriangle(triangle, this.getRotateXMatrix(0*angle))\r\n    }\r\n\r\n    public rotateYTriangle(triangle: Triangle, angle: number) {\r\n        return this.rotateTriangle(triangle, this.getRotateYMatrix(angle))\r\n    }\r\n\r\n    public rotateZTriangle(triangle: Triangle, angle: number) {\r\n        return this.rotateTriangle(triangle, this.getRotateZMatrix(angle))\r\n    }\r\n\r\n    public projectTriangle(triangle: Triangle) {\r\n        return new Triangle(\r\n            this.multiplayVectorAndMatrix(triangle.a, this.projectionMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.b, this.projectionMatrix),\r\n            this.multiplayVectorAndMatrix(triangle.c, this.projectionMatrix),\r\n            triangle.color\r\n        )\r\n    }\r\n\r\n\r\n    private drawMesh(obj: any, angle: number = 0.1) {\r\n        this.ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n        this.ctx.fillStyle = 'black'\r\n        this.ctx.fillRect(0, 0, canvas.width, canvas.height )\r\n        angle += 0.01\r\n        angle > 360 ? angle = 0 : angle\r\n\r\n\r\n\r\n        for (let triangle of obj.mesh) {\r\n        \r\n            // triangle = this.rotateYTriangle(triangle, angle)\r\n            // // console.log('triangle', triangle)\r\n            // triangle = this.rotateZTriangle(triangle, angle)\r\n            // console.log('rotateZTriangle', triangle)\r\n            triangle = this.rotateXTriangle(triangle, angle)\r\n\r\n            triangle.a.z += 3\r\n            triangle.b.z += 3\r\n            triangle.c.z += 3\r\n\r\n            let normal = new Vector3D(0, 0, 0)\r\n\r\n            let line1 = triangle.b.subtract(triangle.a)\r\n            let line2 = triangle.c.subtract(triangle.a)\r\n\r\n            normal = line1.crossProduct(line2)\r\n            normal.normolize()\r\n\r\n            if (normal.dotProduct(triangle.a.subtract(camera.position)) <= 0.0) {\r\n               \r\n                triangle = this.projectTriangle(triangle)\r\n                // console.log('mesh', triangle)\r\n                let scale =  300\r\n                \r\n                triangle.a.x += 1\r\n                triangle.a.y += 1\r\n\r\n                triangle.b.x += 1\r\n                triangle.b.y += 1\r\n\r\n                triangle.c.x += 1\r\n                triangle.c.y += 1\r\n\r\n\r\n                triangle.a.x *= scale\r\n                triangle.a.y *= scale\r\n\r\n                triangle.b.x *= scale  \r\n                triangle.b.y *= scale\r\n                \r\n                triangle.c.x *= scale\r\n                triangle.c.y *= scale\r\n\r\n\r\n                this.drawTriangle(triangle)\r\n                \r\n            }    \r\n        }\r\n        window.requestAnimationFrame(this.drawMesh.bind(this, obj, angle));\r\n    }\r\n\r\n    public drawObj(obj: any) {\r\n        this.drawMesh(obj)\r\n    }\r\n}\r\n\r\n\r\nlet camera = new Camera(new Vector3D(0, 0, 0), 0.1, 1000.0, 90.0, canvasRec.height / canvasRec.width)\r\n\r\nconst cube = new Cube(new Vector3D(100, 100, 0), 300)\r\n\r\nlet render = new Render(canvas, camera)\r\n\r\n\r\n// try {\r\n//   const data = fs.readFileSync('/Users/joe/test.txt', 'utf8');\r\n//   console.log(data);\r\n// } catch (err) {\r\n//   console.error(err);\r\n// }\r\n\r\n\r\nlet result;\r\nfetch('/test.txt').then(response  => response.text()).then(text => {\r\nresult = text.split('\\n');\r\n})\r\n\r\n\r\n\r\n\r\n\r\n// const output = objFile.parse();\r\n// let mesh : Triangle[] = []\r\n\r\n// let v = output.models[0].vertices\r\n// let f = output.models[0].faces\r\n// f.forEach(element => {\r\n    \r\n//     for(let vertice of element){\r\n//         mesh.push(new Triangle(\r\n//             new Vector3D(v[vertice[0] - 1].x, v[vertice[0] - 1].y, v[vertice[0] - 1].z),\r\n//             new Vector3D(v[vertice[1] - 1].x, v[vertice[1] - 1].y, v[vertice[1] - 1].z),\r\n//             new Vector3D(v[vertice[2] - 1].x, v[vertice[2] - 1].y, v[vertice[2] - 1].z),\r\n//             COLORS.red\r\n//         ))\r\n//     }\r\n\r\n// });\r\n\r\n// console.log(output, v, f)\r\n\r\nrender.drawObj(cube)\r\n// console.log(mesh)\r\n\r\n","module.exports = \"75e5389344d8dc1c\";"],"names":["console","log","$parcel$interopDefault","$f1f6561c8ce210a1$var$canvas","document","getElementById","$f1f6561c8ce210a1$var$canvasRec","getContext","getBoundingClientRect","$f1f6561c8ce210a1$var$HSL","constructor","h","s","l","this","toString","$f1f6561c8ce210a1$var$COLORS","static","$f1f6561c8ce210a1$var$Vector3D","x","y","z","crossProduct","v","dotProduct","subtract","normolize","length","Math","sqrt","$f1f6561c8ce210a1$var$Triangle","p1","p2","p3","color","a","b","c","changeLightness","$f1f6561c8ce210a1$var$Matrix4x4","m","i","j","$f1f6561c8ce210a1$var$camera","position","near","far","fov","aspect","fovRad","tan","PI","height","width","$f1f6561c8ce210a1$var$cube","size","mesh","createMesh","blue","red","green","orange","purple","yellow","$f1f6561c8ce210a1$var$result","$f1f6561c8ce210a1$var$render","canvas","camera","ctx","canvasRec","aspectRation","projectionMatrix","multiplayVectorAndMatrix","newVector","w","abs","getRotateXMatrix","angle","cos","sin","getRotateYMatrix","getRotateZMatrix","drawTriangle","triangle","beginPath","moveTo","lineTo","closePath","strokeStyle","fillStyle","fill","rotateTriangle","rotateMatrix","rotateXTriangle","rotateYTriangle","rotateZTriangle","projectTriangle","drawMesh","obj","clearRect","fillRect","normal","line1","line2","scale","window","requestAnimationFrame","bind","drawObj","fetch","then","response","text","split"],"version":3,"file":"index.c2be6dd7.js.map"}