{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-562c78d31a0ea9bd.js","node_modules/@parcel/runtime-js/lib/runtime-c69a22def5152bf4.js","node_modules/@parcel/runtime-js/lib/runtime-4f6395594a81ec50.js","ts/core/color.ts","ts/core/vector.ts","ts/core/triangle.ts","ts/core/obj.parser.ts","ts/core/math.ts","ts/core/texture.color.parser.ts","ts/core/matrix.ts","ts/core/model.ts","ts/main.ts","ts/core/base.ts","ts/render.ts","node_modules/@parcel/runtime-js/lib/bundles/runtime-051b4ff0f178162e.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-366cf04d1040ae5f.js","node_modules/@parcel/runtime-js/lib/bundles/runtime-d71428437548a2d8.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1HMsc\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"03OkI\")).toString();","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"cilmO\\\":\\\"index.24fe8065.js\\\",\\\"1HMsc\\\":\\\"shiba2.600216fc.png\\\",\\\"03OkI\\\":\\\"texture.3730b696.png\\\"}\"));","export class Color {\r\n\r\n    public r: number;\r\n    public g: number;\r\n    public b: number;\r\n    public a: number;\r\n\r\n    constructor(r: number, g: number, b: number, a: number = 255) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n\r\n    public static getRanomColor(): Color {\r\n        return new Color(this._getRandomInt(255), this._getRandomInt(255), this._getRandomInt(255))\r\n    }\r\n\r\n    private static  _getRandomInt(max: number): number {\r\n        return Math.floor(Math.random() * Math.floor(max+1));\r\n    }\r\n}\r\n","export class Vector2D{\r\n    x: number\r\n    y: number\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x\r\n        this.y = y\r\n    }\r\n\r\n    public subtract(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x - v.x, this.y - v.y)\r\n    }\r\n\r\n    public add(v: Vector2D): Vector2D {\r\n        return new Vector2D(this.x + v.x, this.y + v.y)\r\n    }\r\n\r\n    public round(): Vector2D {\r\n        return new Vector2D(Math.round(this.x), Math.round(this.y))\r\n    }\r\n\r\n    public multiply(scalar: number): Vector2D {\r\n        return new Vector2D(this.x * scalar, this.y * scalar)\r\n    }\r\n\r\n    public normalize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class Vector3D extends Vector2D {\r\n    z: number\r\n\r\n    constructor(x: number, y: number, z: number) {\r\n        super(x, y)\r\n        this.z = z\r\n    }\r\n  \r\n    // right hand coordinate system\r\n    public crossProduct(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\r\n    }\r\n\r\n    public dotProduct(v: Vector3D): number { \r\n        return this.x * v.x + this.y * v.y + this.z * v.z\r\n    }\r\n\r\n    public subtract(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x - v.x, this.y - v.y, this.z - v.z)\r\n    }\r\n\r\n    public add(v: Vector3D): Vector3D {\r\n        return new Vector3D(this.x + v.x, this.y + v.y, this.z + v.z)\r\n    }\r\n\r\n    public round(): Vector3D {\r\n        return new Vector3D(Math.round(this.x), Math.round(this.y), Math.round(this.z))\r\n    }\r\n\r\n    public multiply(scalar: number): Vector3D {\r\n        return new Vector3D(this.x * scalar, this.y * scalar, this.z * scalar)\r\n    }\r\n\r\n    public normalize() {\r\n        let length = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n        if (length != 0) {\r\n            this.x /= length\r\n            this.y /= length\r\n            this.z /= length\r\n        }\r\n    }\r\n}\r\n","import { Vector3D } from \"./vector\"\r\n\r\nexport class Triangle {\r\n\r\n    public a: Vector3D\r\n    public b: Vector3D\r\n    public c: Vector3D\r\n   \r\n    constructor(p1: Vector3D, p2: Vector3D, p3: Vector3D) {\r\n        this.a = new Vector3D(p1.x, p1.y, p1.z)\r\n        this.b = new Vector3D(p2.x, p2.y, p2.z)\r\n        this.c = new Vector3D(p3.x, p3.y, p3.z)\r\n    }\r\n}\r\n","import { Model } from \"./model\";\r\nimport { Triangle } from \"./triangle\";\r\nimport { Vector3D } from \"./vector\";\r\n\r\n\r\nexport class ObjParser{\r\n    public static parse(obj: string): {mesh: Triangle[], textureCords: Triangle[], normals: Triangle[]}{\r\n\r\n        let _obj = obj.split(\"\\n\");\r\n        let _vertices = [];\r\n        let _normals = [];\r\n        let _textureCoords = [];\r\n        let mesh = []\r\n        let textureCords = []\r\n        let normals = []\r\n\r\n        let lineItems: string[] = []\r\n\r\n        for(let i = 0; i < _obj.length; i++){\r\n            let line = _obj[i]\r\n\r\n            switch (line[0]) {\r\n                case \"v\":\r\n                    lineItems = line.trim().substring(2).trim().split(\" \")\r\n                    switch (line[1]){\r\n                        case \" \":\r\n                            _vertices.push(new Vector3D(\r\n                                parseFloat(lineItems[0]),\r\n                                parseFloat(lineItems[1]),\r\n                                parseFloat(lineItems[2])\r\n                                )\r\n                            )   \r\n                        break\r\n\r\n                        case \"t\":\r\n                            _textureCoords.push(new Vector3D(\r\n                                parseFloat(lineItems[0]),\r\n                                parseFloat(lineItems[1]),\r\n                                0\r\n                                )\r\n                            )\r\n                        break\r\n\r\n                        case \"n\":\r\n                            \r\n                            _normals.push(new Vector3D(\r\n                                parseFloat(lineItems[0]),\r\n                                parseFloat(lineItems[1]),\r\n                                parseFloat(lineItems[2])\r\n                                )\r\n                            )\r\n                        break\r\n\r\n                    }\r\n                    break\r\n                    \r\n                case \"f\":\r\n                    lineItems = line.split(\" \")\r\n                    let point1Info = lineItems[1].split(\"/\")\r\n                    let point2Info = lineItems[2].split(\"/\")\r\n                    let point3Info = lineItems[3].split(\"/\")\r\n                    mesh.push(new Triangle(\r\n                        _vertices[parseInt(point1Info[0])-1],\r\n                        _vertices[parseInt(point2Info[0])-1],\r\n                        _vertices[parseInt(point3Info[0])-1]\r\n                       \r\n                    ))\r\n\r\n                    textureCords.push(new Triangle(\r\n                        _textureCoords[parseInt(point1Info[1])-1],\r\n                        _textureCoords[parseInt(point2Info[1])-1],\r\n                        _textureCoords[parseInt(point3Info[1])-1]\r\n                    ))\r\n\r\n                    normals.push(new Triangle(\r\n                        _normals[parseInt(point1Info[2])-1],\r\n                        _normals[parseInt(point2Info[2])-1],\r\n                        _normals[parseInt(point3Info[2])-1]\r\n                    ))\r\n            }\r\n        }\r\n\r\n        console.log(_textureCoords)\r\n\r\n\r\n        return {mesh: mesh, textureCords: textureCords, normals: normals}\r\n    }\r\n}","export class Mathematics{\r\n\r\n    public static getMinMax(a: number, b: number, c: number): [number ,number]{\r\n        let min: number = a\r\n        let max: number = a\r\n    \r\n        if (b < min) min = b\r\n        if (c < min) min = c\r\n        if (b > max) max = b\r\n        if (c > max) max = c\r\n    \r\n        return [min, max]\r\n    }\r\n\r\n}\r\n\r\n","/** @param {string} source */\r\nasync function imageDataFromSource (source) {\r\n    const image = Object.assign(new Image(), { src: source });\r\n    await new Promise<void>(resolve => image.addEventListener('load', () => resolve()));\r\n    const context = Object.assign(document.createElement('canvas'), {\r\n       width: image.width,\r\n       height: image.height\r\n    }).getContext('2d');\r\n    context.imageSmoothingEnabled = false;\r\n    context.drawImage(image, 0, 0);\r\n    return context.getImageData(0, 0, image.width, image.height);\r\n }\r\n\r\n\r\nexport async function getTextureData (source) {\r\n   return await imageDataFromSource(source)\r\n}\r\n","import { Vector3D } from \"./vector\"\r\n\r\nexport class Matrix3x3 {\r\n    m : number[][]\r\n    public constructor(m: number[][]) {\r\n        this.m = []\r\n        for (let i = 0; i < 3; i++) {\r\n            this.m[i] = []\r\n            for (let j = 0; j < 3; j++) {\r\n                this.m[i][j] = m[i][j]\r\n            }\r\n        }\r\n    }\r\n\r\n    public multiplyVector(vec: Vector3D): Vector3D {\r\n        let newVector = new Vector3D(\r\n            this.m[0][0] * vec.x + this.m[0][1] * vec.y + this.m[0][2] * vec.z,\r\n            this.m[1][0] * vec.x + this.m[1][1] * vec.y + this.m[1][2] * vec.z,\r\n            this.m[2][0] * vec.x + this.m[2][1] * vec.y + this.m[2][2] * vec.z\r\n        )\r\n\r\n        return newVector\r\n    }\r\n}","import { Matrix3x3 } from \"./matrix\"\r\nimport { Triangle } from \"./triangle\"\r\nimport { Vector3D } from \"./vector\"\r\n\r\nexport class Model {\r\n    public mesh: Triangle[] = []\r\n    public textureCords: Triangle[] = []\r\n    public normals: Triangle[] = []\r\n    public length: number\r\n    public textureWidth: number\r\n    public textureHeight: number\r\n    public textureLength: number\r\n    public texture: Uint8ClampedArray\r\n\r\n    public constructor(mesh: Triangle[], textureCords: Triangle[] = null, normals: Triangle[] = null, textureData: any = null){\r\n        if (textureData != null && (mesh.length != textureCords.length || mesh.length != normals.length))\r\n            throw new Error(\"Mesh, texture cords and normals must have the same length\")\r\n        \r\n        this.length = mesh.length\r\n        this.mesh = mesh\r\n\r\n        if (textureCords != null){\r\n            this.textureCords = textureCords\r\n        }\r\n\r\n        if (normals != null){\r\n        this.normals = normals\r\n        }\r\n\r\n        if (textureData != null){\r\n            this.texture = textureData.data\r\n            this.textureWidth = textureData.width\r\n            this.textureHeight = textureData.height\r\n            this.textureLength = textureData.data.length\r\n        }\r\n       \r\n    }\r\n\r\n    public rotateY(alpha: number): void{\r\n        let rotationMatrix = new Matrix3x3([\r\n                [Math.cos(alpha), 0, Math.sin(alpha)],\r\n                [0, 1, 0],\r\n                [-Math.sin(alpha), 0, Math.cos(alpha)]\r\n        ])\r\n\r\n        for (let triangle of this.mesh){\r\n            triangle.a = rotationMatrix.multiplyVector(triangle.a)\r\n            triangle.b = rotationMatrix.multiplyVector(triangle.b)\r\n            triangle.c = rotationMatrix.multiplyVector(triangle.c)\r\n        }\r\n    }\r\n\r\n    public rotateX(alpha: number): void{\r\n        let rotationMatrix = new Matrix3x3([\r\n                [1, 0, 0],\r\n                [0, Math.cos(alpha), -Math.sin(alpha)],\r\n                [0, Math.sin(alpha), Math.cos(alpha)]\r\n        ])\r\n\r\n        for (let triangle of this.mesh){\r\n            triangle.a = rotationMatrix.multiplyVector(triangle.a)\r\n            triangle.b = rotationMatrix.multiplyVector(triangle.b)\r\n            triangle.c = rotationMatrix.multiplyVector(triangle.c)\r\n        }\r\n    }\r\n\r\n    public rotateZ(alpha: number): void{\r\n        let rotationMatrix = new Matrix3x3([\r\n                [Math.cos(alpha), -Math.sin(alpha), 0],\r\n                [Math.sin(alpha), Math.cos(alpha), 0],\r\n                [0, 0, 1]\r\n        ])\r\n\r\n        for (let triangle of this.mesh){\r\n            triangle.a = rotationMatrix.multiplyVector(triangle.a)\r\n            triangle.b = rotationMatrix.multiplyVector(triangle.b)\r\n            triangle.c = rotationMatrix.multiplyVector(triangle.c)\r\n        }\r\n    }\r\n\r\n    public translate(pos: Vector3D): void{\r\n        for (let triangle of this.mesh){\r\n            triangle.a = triangle.a.add(pos)\r\n            triangle.b = triangle.b.add(pos)\r\n            triangle.c = triangle.c.add(pos)\r\n        }\r\n    }\r\n\r\n    public scale(scale: number): void{\r\n        for (let triangle of this.mesh){\r\n            triangle.a = triangle.a.multiply(scale)\r\n            triangle.b = triangle.b.multiply(scale)\r\n            triangle.c = triangle.c.multiply(scale)\r\n        }\r\n    }\r\n\r\n}\r\n","import {Drawer} from './core/base'\r\n\r\nimport { ObjParser } from './core/obj.parser'\r\nimport {Render} from './render'\r\nimport dog from \"bundle-text:../src/obj/dog2.obj\"\r\nimport man from \"bundle-text:../src/obj/man.obj\"\r\nimport skull from \"bundle-text:../src/obj/skull.obj\"\r\n\r\nimport { getTextureData } from './core/texture.color.parser'\r\nimport { Model } from './core/model'\r\n\r\nconst WIDTH = 800\r\nconst HEIGHT = 800\r\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement\r\n\r\nlet drawer = new Drawer(canvas, WIDTH, HEIGHT, 1)\r\nlet render = new Render(drawer)\r\n\r\nlet parsedDog = ObjParser.parse(dog);\r\nlet parsedMan = ObjParser.parse(man);\r\nlet parsedSkull = ObjParser.parse(skull);\r\n\r\nlet modelDog: Model\r\nlet modelMan: Model\r\nlet modelSkull : Model\r\n\r\nlet textureDog = new Image ()\r\nlet textureMan = new Image ()\r\ntextureDog.src = require('../src/texture/shiba2.png')\r\ntextureMan.src = require('../src/texture/texture.png')\r\n\r\nlet rotYBtn = document.getElementById('rotateY')\r\nlet rotXBtn = document.getElementById('rotateX')\r\nlet rotZBtn = document.getElementById('rotateZ')\r\nlet rotMinusYBtn = document.getElementById('rotateMinusY')\r\nlet rotMinusXBtn = document.getElementById('rotateMinusX')\r\nlet rotMinusZBtn = document.getElementById('rotateMinusZ')\r\nlet stopRotBtn = document.getElementById('rotateStop')\r\nlet scaleBtns = [document.getElementById('scaleUp'), document.getElementById('scaleDown')]\r\nlet cntrlBtns = [rotYBtn, rotXBtn, rotZBtn, stopRotBtn,rotMinusZBtn, rotMinusXBtn, rotMinusYBtn]\r\n\r\nlet models = []\r\nlet counter = 0\r\nlet rotationPos = [0, 0, 0, 0, 0, 0, 0]\r\nlet currentModel = 0\r\n\r\n\r\nfor (let i = 0; i < cntrlBtns.length; i++) {\r\n    cntrlBtns[i].addEventListener('click', () => {\r\n\r\n        if (i == 3) {\r\n            rotationPos = [0, 0, 0, 0, 0, 0, 0]\r\n            return\r\n        }\r\n\r\n        rotationPos[i] = 1\r\n        rotationPos[cntrlBtns.length - i - 1] = 0\r\n        console.log(rotationPos)\r\n    })\r\n}\r\n\r\nfor (let i = 0; i < scaleBtns.length; i++) {\r\n    scaleBtns[i].addEventListener('click', () => {\r\n        if (i == 0) models[currentModel].scale(1.1)\r\n        else models[currentModel].scale(0.9)\r\n    })\r\n}\r\n\r\n\r\ngetTextureData(textureDog.src).then(data => {\r\n    console.log('data', data)\r\n        modelDog = new Model(parsedDog.mesh, parsedDog.textureCords, parsedDog.normals, data);\r\n        console.log(modelDog);\r\n        models.push(modelDog)\r\n        render.setModel(modelDog)\r\n\r\n\r\n        getTextureData(textureMan.src).then(data => {\r\n            console.log('data', data)\r\n                modelMan = new Model(parsedMan.mesh, parsedMan.textureCords, parsedMan.normals, data);\r\n                console.log(modelMan);\r\n                models.push(modelMan)\r\n                modelSkull = new Model(parsedSkull.mesh);\r\n                models.push(modelSkull)\r\n\r\n                setUpNextBtn()\r\n                start()\r\n            }\r\n        )\r\n \r\n    })\r\n\r\n\r\nfunction setUpNextBtn(){\r\n    document.getElementById(\"next\").addEventListener(\"click\", () => {\r\n    console.log(\"next\");\r\n    counter++\r\n    if (counter > models.length - 1) counter = 0\r\n    currentModel = counter\r\n    render.setModel(models[counter])\r\n\r\n    \r\n})\r\n\r\n    setInterval(() => {\r\n\r\n\r\n    }, 1000/60)\r\n}\r\n\r\n\r\nfunction start(){\r\n    requestAnimationFrame(update)\r\n}\r\n\r\n\r\nfunction setRotation(pos){\r\n    rotationPos = pos\r\n}\r\n\r\nfunction rotateModel(){\r\n    \r\n        for (let i = 0; i < rotationPos.length; i++) {\r\n    if (rotationPos[i] == 1)\r\n            switch (i) {\r\n        case 0:\r\n            models[currentModel].rotateY(Math.PI/180)\r\n            break\r\n        case 1:\r\n            models[currentModel].rotateX(Math.PI/180)\r\n            break\r\n        case 2:\r\n            models[currentModel].rotateZ(Math.PI/180)\r\n            break\r\n        case 4:\r\n            models[currentModel].rotateZ(-Math.PI/180)\r\n            break\r\n        case 5:\r\n            models[currentModel].rotateX(-Math.PI/180)\r\n            break\r\n        case 6:   \r\n            models[currentModel].rotateY(-Math.PI/180)\r\n            break\r\n        default:\r\n            break\r\n    }\r\n}\r\n    \r\n}\r\n\r\nlet rect = canvas.getBoundingClientRect()\r\nconsole.log(rect.top, rect.right, rect.bottom, rect.left)\r\n\r\nfunction update(){\r\n    render.render()\r\n    requestAnimationFrame(update)\r\n    rotateModel()\r\n}\r\n\r\n\r\ndocument.addEventListener(\"mousemove\", e => {\r\n    console.log(e.pageX, e.pageY)\r\n    if (e.pageX < rect.left || e.pageX > rect.right || e.pageY > rect.bottom || e.pageY < rect.top) { \r\n            return \r\n        }\r\n    let rotateX: number = (e.pageY - rect.top - ((rect.bottom - rect.top) / 2))/ 5000\r\n    let rotateY: number = (e.pageX - rect.left - ((rect.right - rect.left) / 2)) / 5000\r\n        \r\n    models[currentModel].rotateX(rotateX)\r\n    models[currentModel].rotateY(rotateY)\r\n})\r\n","import { Color } from \"./color\";\r\n\r\nexport class Drawer {\r\n    \r\n        private canvas: HTMLCanvasElement;\r\n        public width: number\r\n        public height: number\r\n        public canvasWidth: number\r\n        public canvasHeight: number\r\n        public pixelSize: number\r\n        private context: CanvasRenderingContext2D\r\n        private imageData: ImageData\r\n        public currentColor: Color\r\n        public buf: ArrayBuffer\r\n        public buf8: Uint8ClampedArray\r\n        public data: Uint32Array\r\n        public int24Color: number\r\n    \r\n        constructor(canvas: HTMLCanvasElement, width: number, height: number, pixelSize: number) {\r\n            this.canvas = canvas\r\n            this.width = width * pixelSize\r\n            this.height = height * pixelSize\r\n            this.canvasWidth = width\r\n            this.canvasHeight = height\r\n            this.pixelSize = pixelSize\r\n            this.context = this.canvas.getContext(\"2d\")\r\n            this.imageData = this.context.createImageData(this.width, this.height)\r\n            this.currentColor = new Color(0, 0, 0)\r\n            this.context.canvas.width = this.width\r\n            this.context.canvas.height = this.height\r\n            this.buf = new ArrayBuffer(this.width * this.height * 4)\r\n            this.buf8 = new Uint8ClampedArray(this.buf)\r\n            this.data = new Uint32Array(this.buf)\r\n        }\r\n      \r\n        public setColor(color: Color): void{\r\n           this.currentColor = color\r\n           this.int24Color = (255 << 24) | (color.b << 16) | (color.g << 8) | color.r\r\n        }\r\n\r\n        public addPoint(x: number, y: number): void {\r\n            let canvasX = x;\r\n            let canvasY = this.canvasHeight - y - 1;\r\n            if (this.pixelSize == 1) {\r\n                let pixelIndex = canvasY * this.width + canvasX;\r\n                this.data[pixelIndex] = this.int24Color;\r\n                return;\r\n            }\r\n            \r\n            const canvasStartX = canvasX * this.pixelSize;\r\n            const canvasStartY = canvasY * this.pixelSize;\r\n            for (var dx = 0; dx < this.pixelSize; dx++) {\r\n                for (var dy = 0; dy < this.pixelSize; dy++) {\r\n                    let pixelIndex = (canvasStartY + dy) * this.width + canvasStartX + dx; \r\n                    this.data[pixelIndex] = this.int24Color;\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        public clear(): void {\r\n            for (let x = 0; x < this.width; x++) {\r\n                for (let y = 0; y < this.height; y++) {\r\n                    this.data[y * this.width + x] = this.int24Color\r\n                }\r\n            }\r\n        }\r\n\r\n        public show(): void {\r\n            this.imageData.data.set(this.buf8)\r\n            this.context.putImageData(this.imageData, 0, 0)\r\n        }\r\n    }\r\n","import { Drawer } from \"./core/base\";\r\nimport { Color } from \"./core/color\";\r\nimport { Triangle } from \"./core/triangle\";\r\nimport { Vector3D } from \"./core/vector\";\r\nimport {Mathematics} from \"./core/math\"\r\nimport { Model } from \"./core/model\";\r\n\r\nexport class Render {\r\n    public drawer: Drawer\r\n    public zBuffer: number[]\r\n    public textureBuffer: Uint8ClampedArray\r\n    public textureBufferWidth: number\r\n    public textureBufferHeight: number\r\n    public textureBufferLength: number\r\n    public models = new Array<Model>()\r\n    public lightDir = new Vector3D(0, 0, 1)\r\n    public dx: number\r\n    public dy: number\r\n    public objZoom: number\r\n    public addedVector: Vector3D\r\n    \r\n    \r\n    constructor(drawer: Drawer) {\r\n        this.drawer = drawer\r\n        this.zBuffer = new Array(this.drawer.width * this.drawer.height).fill(-Infinity)\r\n        this.dx = this.drawer.width / 2\r\n        this.dy = this.drawer.height / 2\r\n        this.objZoom = 300\r\n        this.addedVector = new Vector3D(this.dx, this.dy, 0)\r\n    }\r\n\r\n\r\n    public render() {\r\n        this.clearZBuffer()\r\n        this.drawer.setColor(new Color(30, 30, 30))\r\n        this.drawer.clear()\r\n        this.drawModels()\r\n        this.drawer.show()\r\n    }\r\n\r\n\r\n    public addLine(x0: number, y0: number , x1: number, y1: number): void{\r\n        // y = kx + b\r\n        // setpY = k = (y1 - y0) / (x1 - x0)\r\n        // b = y0 - kx0\r\n        // Bresenham's line algorithm\r\n        \r\n        let isInvert = false\r\n    \r\n        if (Math.abs(y1 - y0) > Math.abs(x1 - x0)) {\r\n            [x0, y0] = [y0, x0];\r\n            [x1, y1] = [y1, x1];\r\n            isInvert = true\r\n        }\r\n    \r\n        if (x1 < x0) {\r\n            [x0, x1] = [x1, x0];\r\n            [y0, y1] = [y1, y0];\r\n        }\r\n    \r\n        let xLength = x1 - x0\r\n        let deltaY = 0\r\n        let stepY = 2 * Math.abs((y1 - y0))\r\n        let y = y0\r\n        let dy = y1 > y0 ? 1 : -1\r\n        let doubleXLenght = 2 * xLength\r\n    \r\n        for (let x = x0; x <= x1; x++) {\r\n            this.drawer.addPoint(isInvert ? y : x, isInvert ? x : y)\r\n            deltaY += stepY\r\n            if (deltaY > xLength) {\r\n                y += dy\r\n                deltaY -= doubleXLenght\r\n            }\r\n    \r\n        }\r\n    }\r\n\r\n    public addTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): void {\r\n        this.addLine(x0, y0, x1, y1)\r\n        this.addLine(x1, y1, x2, y2)\r\n        this.addLine(x2, y2, x0, y0)\r\n    }\r\n\r\n    public getBarycentricCoords(a: Vector3D, b: Vector3D, c: Vector3D, p: Vector3D): Vector3D{\r\n        let ab = b.subtract(a)\r\n        let ac = c.subtract(a)\r\n        let pa = a.subtract(p)\r\n    \r\n        let v1 = new Vector3D(ab.x, ac.x, pa.x)\r\n        let v2 = new Vector3D(ab.y, ac.y, pa.y)\r\n        let v3 = v1.crossProduct(v2)\r\n    \r\n        if (v3.z == 0) return null\r\n    \r\n        let u = v3.x / v3.z\r\n        let v = v3.y / v3.z\r\n    \r\n        return new Vector3D(1 - u - v, v, u)\r\n    }\r\n\r\n    private _interpolateFromBaricentricToTextureCoords(textureTriangle: Triangle, barycentric: Vector3D): Vector3D {\r\n        let texturePoint = \r\n            textureTriangle.a.multiply(barycentric.x).add(\r\n                textureTriangle.b.multiply(barycentric.y).add(\r\n                    textureTriangle.c.multiply(barycentric.z)\r\n            )\r\n            )\r\n        return texturePoint\r\n    }\r\n\r\n    public fillTriangleBarycentric(a: Vector3D, b:Vector3D, c: Vector3D, textureTriangle: Triangle = null, intensity = 1): void {\r\n        const [minX, maxX] = Mathematics.getMinMax(a.x, b.x, c.x)\r\n        const [minY, maxY] = Mathematics.getMinMax(a.y, b.y, c.y)\r\n\r\n        for (let y = minY; y <= maxY; y++){\r\n            for (let x = minX; x <= maxX; x++){\r\n                \r\n                let barycentric = this.getBarycentricCoords(a, b, c, new Vector3D(x, y, 0))\r\n                let index = y * this.drawer.width + x\r\n                if (barycentric == null){\r\n                    continue\r\n                }\r\n                let pz = a.z * barycentric.x + b.z * barycentric.y + c.z * barycentric.z\r\n\r\n                if (pz <= this.zBuffer[index]){\r\n                    continue\r\n                }\r\n                if (barycentric.x > 0 && barycentric.y > 0 && barycentric.z > 0){\r\n                    if (textureTriangle != null){\r\n                        let uv = this._interpolateFromBaricentricToTextureCoords(textureTriangle, barycentric)\r\n                        let rIndx = 4 *(Math.ceil(uv.x*this.textureBufferWidth)  + Math.ceil(uv.y * this.textureBufferHeight)*this.textureBufferWidth)\r\n                        let c = new Color(this.textureBuffer[rIndx]*intensity, this.textureBuffer[rIndx+1]*intensity, this.textureBuffer[rIndx+1]*intensity)\r\n                        this.drawer.setColor(c)    \r\n                    }\r\n                    this.drawer.addPoint(x, y)\r\n                    this.zBuffer[index] = pz\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public fillTriangle(a: Vector3D, b: Vector3D, c: Vector3D, textureTriangle: Triangle = null, intensity: number = 1, modelIndx: number): void {\r\n\r\n        let x0 = a.x\r\n        let y0 = a.y\r\n        let x1 = b.x\r\n        let y1 = b.y\r\n        let x2 = c.x\r\n        let y2 = c.y\r\n\r\n        // sort points by y\r\n        // devide triangle on two parts\r\n        // fill first part\r\n        // fill second part\r\n        // user ctg to find x\r\n        \r\n        if (x0 == x1 && x1 == x2) {\r\n            return\r\n        }\r\n\r\n        if (y0 == y1 && y1 == y2) {\r\n            return\r\n        }\r\n\r\n        if (y1 < y0) {\r\n            [x0, x1] = [x1, x0];\r\n            [y0, y1] = [y1, y0];\r\n        }\r\n\r\n        if (y2 < y0) {\r\n            [x0, x2] = [x2, x0];\r\n            [y0, y2] = [y2, y0];\r\n        }\r\n\r\n        if (y2 < y1) {\r\n            [x1, x2] = [x2, x1];\r\n            [y1, y2] = [y2, y1];\r\n        }\r\n\r\n        let ctgA = (x2 - x0) / (y2 - y0);\r\n        let ctgB = y1 != y0 ? (x1 - x0) / (y1 - y0) : 0;\r\n        let ctgC = y2 != y1 ? (x2 - x1) / (y2 - y1) : 0;\r\n\r\n        let xA = x0;\r\n        let xB = x0;\r\n        let xC = x1;\r\n\r\n        let xFrom: number, xTo: number;\r\n\r\n        for (let y = y0;; y++) {\r\n            xFrom = Math.round(xA);\r\n            xTo = y < y1 ? Math.round(xB) : Math.round(xC);\r\n            if (xTo < xFrom) {\r\n                [xFrom, xTo] = [xTo, xFrom];\r\n            }\r\n            for (let x = xFrom; x <= xTo; x++) {\r\n                let barycentric = this.getBarycentricCoords(a, b, c, new Vector3D(x, y, 0))\r\n                if (barycentric != null){\r\n                    let pz = a.z * barycentric.x + b.z * barycentric.y + c.z * barycentric.z\r\n                    let index = y * this.drawer.width + x\r\n\r\n                    // let uv = this.fromBarycentricTo(barycentric, textureTriangle.a.multiply(64), textureTriangle.b.multiply(64), textureTriangle.c.multiply(64))\r\n                           \r\n                    if (pz > this.zBuffer[index]){\r\n                        if (textureTriangle != null) {\r\n\r\n                            let [textureWidth, textureHeight, textureLength] = [this.models[modelIndx].textureWidth, this.models[modelIndx].textureHeight, this.models[modelIndx].textureLength]\r\n                            // console.log(textureWidth, textureHeight, textureLength)\r\n                            let uv = this._interpolateFromBaricentricToTextureCoords(textureTriangle, barycentric)\r\n                            let uvX = Math.ceil(uv.x*textureWidth)\r\n                            let uvY = Math.ceil(uv.y*textureHeight)\r\n                            let rIndx = textureLength - 4 *(uvX + uvY*textureWidth) \r\n                            let r = this.models[modelIndx].texture[rIndx] * intensity\r\n                            let g = this.models[modelIndx].texture[rIndx+1]* intensity\r\n                            let b = this.models[modelIndx].texture[rIndx+2]* intensity\r\n                            let c = new Color(r, g, b)\r\n                            this.drawer.setColor(c)\r\n                        }\r\n                        else {\r\n                            this.drawer.setColor(new Color(255*intensity, 255*intensity, 255*intensity))\r\n                        }\r\n                        this.drawer.addPoint(x, y)\r\n                        this.zBuffer[index] = pz\r\n                    }\r\n                }\r\n            }\r\n    \r\n            if (y >= y2) {\r\n                break;\r\n            }\r\n    \r\n            xA += ctgA;\r\n            if (y < y1) {\r\n                xB += ctgB;\r\n            }\r\n            else {\r\n                xC += ctgC;\r\n            }\r\n        }\r\n    }\r\n\r\n    public drawModels(){\r\n        for (let j = 0; j < this.models.length; j++) {\r\n         \r\n            for (let i = 0; i < this.models[j].length; i++) {\r\n                let triangle: Triangle = this.models[j].mesh[i]\r\n                let textureCord :Triangle = this.models[j].textureCords[i]\r\n                let normals:Triangle =  this.models[j].normals[i]\r\n        \r\n                let a: Vector3D = triangle.a\r\n                let b: Vector3D = triangle.b\r\n                let c: Vector3D = triangle.c\r\n                let vec1 = b.subtract(a)\r\n                let vec2 = c.subtract(a)\r\n                let normal = vec1.crossProduct(vec2)\r\n                normal.normalize()\r\n                            \r\n                let intensity = this.lightDir.dotProduct(normal)\r\n\r\n                if (intensity > 0){\r\n\r\n                    this.fillTriangle(\r\n                        a.multiply(this.objZoom).add(this.addedVector).round(),\r\n                        b.multiply(this.objZoom).add(this.addedVector).round(),\r\n                        c.multiply(this.objZoom).add(this.addedVector).round(),\r\n                        textureCord, \r\n                        intensity,\r\n                        j\r\n                    )\r\n                }\r\n            \r\n            }\r\n        }\r\n    }\r\n            \r\n\r\n\r\n    public clearZBuffer(): void{\r\n        this.zBuffer = new Array(this.drawer.width * this.drawer.height).fill(-Infinity)\r\n    }\r\n\r\n    public addModel(model: Model){\r\n        this.models.push(model)\r\n    }  \r\n\r\n    public clearModels(){\r\n        this.models = []\r\n    }\r\n\r\n    public setModel(model: Model){\r\n        this.models = [model]\r\n    }\r\n}\r\n","module.exports = \"9ada2820eedccf69\";","module.exports = \"7e4ff31e61a39d1a\";","module.exports = \"58f7ed1ce5bdb92d\";"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","module","exports","URL","parcelRequire","resolve","import","meta","url","toString","register","JSON","parse","$81b7e1828a93a564$export$892596cec99bc70e","constructor","r","g","b","a","this","static","_getRandomInt","max","Math","floor","random","$80f05e7a3dcbb898$export$f6b39f5a8a6533a5","x","y","subtract","v","add","round","multiply","scalar","normalize","sqrt","$80f05e7a3dcbb898$export$fe203bd8c6486855","z","super","crossProduct","dotProduct","$4043cec9244d7ff7$export$5a465592bfe74b48","p1","p2","p3","c","$dee476fb77b0925a$export$cebd276add3e2509","obj","_obj","split","_vertices","_normals","_textureCoords","mesh","textureCords","normals","lineItems","line","trim","substring","push","parseFloat","point1Info","point2Info","point3Info","parseInt","console","log","$c5a5671001fe1ccb$export$e7e62bca8f4441f5","min","async","$d68a01c54b3229ad$export$139f02209b005611","source","image","assign","Image","src","Promise","addEventListener","context","document","createElement","width","height","getContext","imageSmoothingEnabled","drawImage","getImageData","$d68a01c54b3229ad$var$imageDataFromSource","$e5d0bc66d4d570f2$export$f0a5d927dd717bca","m","j","multiplyVector","vec","$8add6174fa56b25d$export$a1edc412be3e1841","textureData","texture","data","textureWidth","textureHeight","textureLength","rotateY","alpha","rotationMatrix","cos","sin","triangle","rotateX","rotateZ","translate","pos","scale","$6fe321f8d8f01b12$var$canvas","getElementById","$6fe321f8d8f01b12$var$modelDog","$6fe321f8d8f01b12$var$modelMan","$6fe321f8d8f01b12$var$modelSkull","$6fe321f8d8f01b12$var$drawer","canvas","pixelSize","canvasWidth","canvasHeight","imageData","createImageData","currentColor","buf","ArrayBuffer","buf8","Uint8ClampedArray","Uint32Array","setColor","color","int24Color","addPoint","canvasX","canvasY","pixelIndex","canvasStartX","canvasStartY","dx","dy","pixelIndex1","clear","show","set","putImageData","$6fe321f8d8f01b12$var$render","models","Array","lightDir","drawer","zBuffer","fill","Infinity","objZoom","addedVector","render","clearZBuffer","drawModels","addLine","x0","y0","x1","y1","isInvert","abs","xLength","deltaY","stepY","doubleXLenght","addTriangle","x2","y2","getBarycentricCoords","p","ab","ac","pa","v1","v2","v3","u","_interpolateFromBaricentricToTextureCoords","textureTriangle","barycentric","fillTriangleBarycentric","intensity","minX","maxX","getMinMax","minY","maxY","index","pz","uv","rIndx","ceil","textureBufferWidth","textureBufferHeight","c1","textureBuffer","fillTriangle","modelIndx","xFrom","xTo","ctgA","ctgB","ctgC","xA","xB","xC","b1","textureCord","vec1","vec2","normal","addModel","model","clearModels","setModel","$6fe321f8d8f01b12$var$parsedDog","$parcel$interopDefault","$6fe321f8d8f01b12$var$parsedMan","$6fe321f8d8f01b12$var$parsedSkull","$6fe321f8d8f01b12$var$textureDog","$6fe321f8d8f01b12$var$textureMan","$6fe321f8d8f01b12$var$rotYBtn","$6fe321f8d8f01b12$var$rotXBtn","$6fe321f8d8f01b12$var$rotZBtn","$6fe321f8d8f01b12$var$rotMinusYBtn","$6fe321f8d8f01b12$var$rotMinusXBtn","$6fe321f8d8f01b12$var$rotMinusZBtn","$6fe321f8d8f01b12$var$stopRotBtn","$6fe321f8d8f01b12$var$scaleBtns","$6fe321f8d8f01b12$var$cntrlBtns","$6fe321f8d8f01b12$var$models","$6fe321f8d8f01b12$var$counter","$6fe321f8d8f01b12$var$rotationPos","$6fe321f8d8f01b12$var$currentModel","i1","then","setInterval","requestAnimationFrame","$6fe321f8d8f01b12$var$update","$6fe321f8d8f01b12$var$rect","getBoundingClientRect","PI","$6fe321f8d8f01b12$var$rotateModel","top","right","bottom","left","e","pageX","pageY"],"version":3,"file":"index.24fe8065.js.map"}